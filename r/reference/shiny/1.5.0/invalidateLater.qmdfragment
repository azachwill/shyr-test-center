---
title: "Scheduled Invalidation â€” invalidateLater"
---

```{=html}
<div class="reference">
  

  <pre class="code"><span class='fu'>invalidateLater</span>(<span class='no'>millis</span>, <span class='kw'>session</span> <span class='kw'>=</span> <span class='fu'><a href='domains.html'>getDefaultReactiveDomain</a></span>())</pre>

  <h3 class="hasAnchor" id="arguments"><a class="anchor" href="#arguments"></a>Arguments</h3>
  <table class="arguments">
  <colgroup><col class="name" /><col class="desc" /></colgroup>
  <tr>
    <th><p>millis</p></th>
    <td><p>Approximate milliseconds to wait before invalidating the
current reactive context.</p></td>
  </tr>
  <tr>
    <th><p>session</p></th>
    <td><p>A session object. This is needed to cancel any scheduled
invalidations after a user has ended the session. If <code>NULL</code>, then
this invalidation will not be tied to any session, and so it will still
occur.</p></td>
  </tr>
  </table>

  <div data-section="description">
  <h3>Description</h3>
  <p>Schedules the current reactive context to be invalidated in the given number
of milliseconds.</p>
  </div>


  <div data-section="details">
  <h3 class="hasAnchor" id="details"><a class="anchor" href="#details"></a>Details</h3>

  <p>If this is placed within an observer or reactive expression, that object will
be invalidated (and re-execute) after the interval has passed. The
re-execution will reset the invalidation flag, so in a typical use case, the
object will keep re-executing and waiting for the specified interval. It's
possible to stop this cycle by adding conditional logic that prevents the
<code>invalidateLater</code> from being run.</p>
  <h3 class="hasAnchor" id="see-also"><a class="anchor" href="#see-also"></a>See also</h3>

  <div class='dont-index'><p><code><a href='reactiveTimer.html'>reactiveTimer()</a></code> is a slightly less safe alternative.</p></div>
  </div>

  <h3 class="hasAnchor" id="examples"><a class="anchor" href="#examples"></a>Examples</h3>
  <pre class="examples"><span class='co'>## Only run examples in interactive R sessions</span>
<span class='kw'>if</span> (<span class='fu'><a href='https://rdrr.io/r/base/interactive.html'>interactive</a></span>()) {

<span class='no'>ui</span> <span class='kw'>&lt;-</span> <span class='fu'><a href='fluidPage.html'>fluidPage</a></span>(
  <span class='fu'><a href='sliderInput.html'>sliderInput</a></span>(<span class='st'>"n"</span>, <span class='st'>"Number of observations"</span>, <span class='fl'>2</span>, <span class='fl'>1000</span>, <span class='fl'>500</span>),
  <span class='fu'><a href='plotOutput.html'>plotOutput</a></span>(<span class='st'>"plot"</span>)
)

<span class='no'>server</span> <span class='kw'>&lt;-</span> <span class='kw'>function</span>(<span class='no'>input</span>, <span class='no'>output</span>, <span class='no'>session</span>) {

  <span class='fu'><a href='observe.html'>observe</a></span>({
    <span class='co'># Re-execute this reactive expression after 1000 milliseconds</span>
    <span class='fu'>invalidateLater</span>(<span class='fl'>1000</span>, <span class='no'>session</span>)

    <span class='co'># Do something each time this is invalidated.</span>
    <span class='co'># The isolate() makes this observer _not_ get invalidated and re-executed</span>
    <span class='co'># when input$n changes.</span>
    <span class='fu'><a href='https://rdrr.io/r/base/print.html'>print</a></span>(<span class='fu'><a href='https://rdrr.io/r/base/paste.html'>paste</a></span>(<span class='st'>"The value of input$n is"</span>, <span class='fu'><a href='isolate.html'>isolate</a></span>(<span class='no'>input</span>$<span class='no'>n</span>)))
  })

  <span class='co'># Generate a new histogram at timed intervals, but not when</span>
  <span class='co'># input$n changes.</span>
  <span class='no'>output</span>$<span class='no'>plot</span> <span class='kw'>&lt;-</span> <span class='fu'><a href='renderPlot.html'>renderPlot</a></span>({
    <span class='co'># Re-execute this reactive expression after 2000 milliseconds</span>
    <span class='fu'>invalidateLater</span>(<span class='fl'>2000</span>)
    <span class='fu'><a href='https://rdrr.io/r/graphics/hist.html'>hist</a></span>(<span class='fu'><a href='https://rdrr.io/r/stats/Normal.html'>rnorm</a></span>(<span class='fu'><a href='isolate.html'>isolate</a></span>(<span class='no'>input</span>$<span class='no'>n</span>)))
  })
}

<span class='fu'><a href='shinyApp.html'>shinyApp</a></span>(<span class='no'>ui</span>, <span class='no'>server</span>)
}</pre>
</div>


```
