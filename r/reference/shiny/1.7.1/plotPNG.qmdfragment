---
title: "Run a plotting function and save the output as a PNG â€” plotPNG"
---

```{=html}
<div class="reference">
  <small class="dont-index pkg-version">v1.7.1</small><small class="dont-index pipe">|</small><small class="dont-index github-source">Source: <a href="https://github.com/rstudio/shiny/blob/v1.7.1/R/imageutils.R" class="external-link"><code>R/imageutils.R</code></a></small>

  <div data-section="description"><h3>Description</h3><p>This function returns the name of the PNG file that it generates. In
essence, it calls <code><a href="https://rdrr.io/r/grDevices/png.html" class="external-link">png()</a></code>, then <code>func()</code>, then <code><a href="https://rdrr.io/r/grDevices/dev.html" class="external-link">dev.off()</a></code>.
So <code>func</code> must be a function that will generate a plot when used this
way.</p></div>

  <div data-section="usage"><div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">plotPNG</span>(</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>  func,</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a>  <span class="at">filename =</span> <span class="fu">tempfile</span>(<span class="at">fileext =</span> <span class="st">".png"</span>),</span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>  <span class="at">width =</span> <span class="dv">400</span>,</span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>  <span class="at">height =</span> <span class="dv">400</span>,</span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a>  <span class="at">res =</span> <span class="dv">72</span>,</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a>  ...</span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a>)</span></code></pre></div></div>

  <div data-section="arguments">
    <h3 id="arguments">Arguments</h3>
    <dl><dt>func</dt>
<dd><p>A function that generates a plot.</p></dd>


<dt>filename</dt>
<dd><p>The name of the output file. Defaults to a temp file with
extension <code>.png</code>.</p></dd>


<dt>width</dt>
<dd><p>Width in pixels.</p></dd>


<dt>height</dt>
<dd><p>Height in pixels.</p></dd>


<dt>res</dt>
<dd><p>Resolution in pixels per inch. This value is passed to
<code><a href="https://rdrr.io/r/grDevices/png.html" class="external-link">grDevices::png()</a></code>. Note that this affects the resolution of PNG rendering in
R; it won't change the actual ppi of the browser.</p></dd>


<dt>...</dt>
<dd><p>Arguments to be passed through to <code><a href="https://rdrr.io/r/grDevices/png.html" class="external-link">grDevices::png()</a></code>.
These can be used to set the width, height, background color, etc.</p></dd>

</dl></div>
  <div data-section="details">
    <h3 id="details">Details</h3>
    <p>For output, it will try to use the following devices, in this order:
quartz (via <code><a href="https://rdrr.io/r/grDevices/png.html" class="external-link">grDevices::png()</a></code>), then <code><a href="https://rdrr.io/pkg/Cairo/man/Cairo.html" class="external-link">Cairo::CairoPNG()</a></code>,
and finally <code><a href="https://rdrr.io/r/grDevices/png.html" class="external-link">grDevices::png()</a></code>. This is in order of quality of
output. Notably, plain <code>png</code> output on Linux and Windows may not
antialias some point shapes, resulting in poor quality output.</p>
<p>In some cases, <code>Cairo()</code> provides output that looks worse than
<code><a href="https://rdrr.io/r/grDevices/png.html" class="external-link">png()</a></code>. To disable Cairo output for an app, use
<code>options(shiny.usecairo=FALSE)</code>.</p>
  </div>

</div>
```
