---
title: "Mark a function as a render function â€” markRenderFunction"
---

```{=html}
<div class="reference">
  

  <pre class="code"><span class='fu'>markRenderFunction</span>(
  <span class='no'>uiFunc</span>,
  <span class='no'>renderFunc</span>,
  <span class='kw'>outputArgs</span> <span class='kw'>=</span> <span class='fu'><a href='https://rdrr.io/r/base/list.html'>list</a></span>(),
  <span class='kw'>cacheHint</span> <span class='kw'>=</span> <span class='st'>"auto"</span>,
  <span class='kw'>cacheWriteHook</span> <span class='kw'>=</span> <span class='kw'>NULL</span>,
  <span class='kw'>cacheReadHook</span> <span class='kw'>=</span> <span class='kw'>NULL</span>
)</pre>

  <h3 class="hasAnchor" id="arguments"><a class="anchor" href="#arguments"></a>Arguments</h3>
  <table class="arguments">
  <colgroup><col class="name" /><col class="desc" /></colgroup>
  <tr>
    <th><p>uiFunc</p></th>
    <td><p>A function that renders Shiny UI. Must take a single argument:
an output ID.</p></td>
  </tr>
  <tr>
    <th><p>renderFunc</p></th>
    <td><p>A function that is suitable for assigning to a Shiny output
slot.</p></td>
  </tr>
  <tr>
    <th><p>outputArgs</p></th>
    <td><p>A list of arguments to pass to the <code>uiFunc</code>. Render
functions should include <code>outputArgs = list()</code> in their own parameter list,
and pass through the value to <code>markRenderFunction</code>, to allow app authors to
customize outputs. (Currently, this is only supported for dynamically
generated UIs, such as those created by Shiny code snippets embedded in R
Markdown documents).</p></td>
  </tr>
  <tr>
    <th><p>cacheHint</p></th>
    <td><p>One of <code>"auto"</code>, <code>FALSE</code>, or some other information to
identify this instance for caching using <code><a href='bindCache.html'>bindCache()</a></code>. If <code>"auto"</code>, it
will try to automatically infer caching information. If <code>FALSE</code>, do not
allow caching for the object. Some render functions (such as <a href='renderPlot.html'>renderPlot</a>)
contain internal state that makes them unsuitable for caching.</p></td>
  </tr>
  <tr>
    <th><p>cacheWriteHook</p></th>
    <td><p>Used if the render function is passed to <code><a href='bindCache.html'>bindCache()</a></code>.
This is an optional callback function to invoke before saving the value
from the render function to the cache. This function must accept one
argument, the value returned from <code>renderFunc</code>, and should return the value
to store in the cache.</p></td>
  </tr>
  <tr>
    <th><p>cacheReadHook</p></th>
    <td><p>Used if the render function is passed to <code><a href='bindCache.html'>bindCache()</a></code>.
This is an optional callback function to invoke after reading a value from
the cache (if there is a cache hit). The function will be passed one
argument, the value retrieved from the cache. This can be useful when some
side effect needs to occur for a render function to behave correctly. For
example, some render functions call <code><a href='createWebDependency.html'>createWebDependency()</a></code> so that Shiny
is able to serve JS and CSS resources.</p></td>
  </tr>
  </table>

  <div data-section="description">
  <h3>Description</h3>
  <p>Should be called by implementers of <code>renderXXX</code> functions in order to mark
their return values as Shiny render functions, and to provide a hint to Shiny
regarding what UI function is most commonly used with this type of render
function. This can be used in R Markdown documents to create complete output
widgets out of just the render function.</p>
  </div>


  <div data-section="details">
  <h3 class="hasAnchor" id="value"><a class="anchor" href="#value"></a>Value</h3>

  <p>The <code>renderFunc</code> function, with annotations.</p>
  <h3 class="hasAnchor" id="see-also"><a class="anchor" href="#see-also"></a>See also</h3>

  <div class='dont-index'><p><code><a href='createRenderFunction.html'>createRenderFunction()</a></code>, <code><a href='quoToFunction.html'>quoToFunction()</a></code></p></div>
  </div>

</div>


```
