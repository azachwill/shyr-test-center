---
title: "Freeze a reactive value â€” freezeReactiveVal"
---

```{=html}
<div class="reference">
  

  <pre class="code"><span class='fu'>freezeReactiveVal</span>(<span class='no'>x</span>)

<span class='fu'>freezeReactiveValue</span>(<span class='no'>x</span>, <span class='no'>name</span>)</pre>

  <h3 class="hasAnchor" id="arguments"><a class="anchor" href="#arguments"></a>Arguments</h3>
  <table class="arguments">
  <colgroup><col class="name" /><col class="desc" /></colgroup>
  <tr>
    <th><p>x</p></th>
    <td><p>For <code>freezeReactiveValue</code>, a <code><a href='reactiveValues.html'>reactiveValues()</a></code>
object (like <code>input</code>); for <code>freezeReactiveVal</code>, a
<code><a href='reactiveVal.html'>reactiveVal()</a></code> object.</p></td>
  </tr>
  <tr>
    <th><p>name</p></th>
    <td><p>The name of a value in the <code><a href='reactiveValues.html'>reactiveValues()</a></code> object.</p></td>
  </tr>
  </table>

  <div data-section="description">
  <h3>Description</h3>
  <p>These functions freeze a <code><a href='reactiveVal.html'>reactiveVal()</a></code>, or an element of a
<code><a href='reactiveValues.html'>reactiveValues()</a></code>. If the value is accessed while frozen, a
"silent" exception is raised and the operation is stopped. This is the same
thing that happens if <code><a href='req.html'>req(FALSE)</a></code> is called. The value is thawed
(un-frozen; accessing it will no longer raise an exception) when the current
reactive domain is flushed. In a Shiny application, this occurs after all of
the observers are executed. <strong>NOTE:</strong> We are considering deprecating
<code>freezeReactiveVal</code>, and <code>freezeReactiveValue</code> except when <code>x</code> is <code>input</code>.
If this affects your app, please let us know by leaving a comment on
<a href='https://github.com/rstudio/shiny/issues/3063'>this GitHub issue</a>.</p>
  </div>


  <div data-section="details">
  <h3 class="hasAnchor" id="see-also"><a class="anchor" href="#see-also"></a>See also</h3>

  <div class='dont-index'><p><code><a href='req.html'>req()</a></code></p></div>
  </div>

  <h3 class="hasAnchor" id="examples"><a class="anchor" href="#examples"></a>Examples</h3>
  <pre class="examples"><span class='co'>## Only run this examples in interactive R sessions</span>
<span class='kw'>if</span> (<span class='fu'><a href='https://rdrr.io/r/base/interactive.html'>interactive</a></span>()) {

<span class='no'>ui</span> <span class='kw'>&lt;-</span> <span class='fu'><a href='fluidPage.html'>fluidPage</a></span>(
  <span class='fu'><a href='selectInput.html'>selectInput</a></span>(<span class='st'>"data"</span>, <span class='st'>"Data Set"</span>, <span class='fu'><a href='https://rdrr.io/r/base/c.html'>c</a></span>(<span class='st'>"mtcars"</span>, <span class='st'>"pressure"</span>)),
  <span class='fu'><a href='checkboxGroupInput.html'>checkboxGroupInput</a></span>(<span class='st'>"cols"</span>, <span class='st'>"Columns (select 2)"</span>, <span class='fu'><a href='https://rdrr.io/r/base/character.html'>character</a></span>(<span class='fl'>0</span>)),
  <span class='fu'><a href='plotOutput.html'>plotOutput</a></span>(<span class='st'>"plot"</span>)
)

<span class='no'>server</span> <span class='kw'>&lt;-</span> <span class='kw'>function</span>(<span class='no'>input</span>, <span class='no'>output</span>, <span class='no'>session</span>) {
  <span class='fu'><a href='observe.html'>observe</a></span>({
    <span class='no'>data</span> <span class='kw'>&lt;-</span> <span class='fu'><a href='https://rdrr.io/r/base/get.html'>get</a></span>(<span class='no'>input</span>$<span class='no'>data</span>)
    <span class='co'># Sets a flag on input$cols to essentially do req(FALSE) if input$cols</span>
    <span class='co'># is accessed. Without this, an error will momentarily show whenever a</span>
    <span class='co'># new data set is selected.</span>
    <span class='fu'>freezeReactiveValue</span>(<span class='no'>input</span>, <span class='st'>"cols"</span>)
    <span class='fu'><a href='updateCheckboxGroupInput.html'>updateCheckboxGroupInput</a></span>(<span class='no'>session</span>, <span class='st'>"cols"</span>, <span class='kw'>choices</span> <span class='kw'>=</span> <span class='fu'><a href='https://rdrr.io/r/base/names.html'>names</a></span>(<span class='no'>data</span>))
  })

  <span class='no'>output</span>$<span class='no'>plot</span> <span class='kw'>&lt;-</span> <span class='fu'><a href='renderPlot.html'>renderPlot</a></span>({
    <span class='co'># When a new data set is selected, input$cols will have been invalidated</span>
    <span class='co'># above, and this will essentially do the same as req(FALSE), causing</span>
    <span class='co'># this observer to stop and raise a silent exception.</span>
    <span class='no'>cols</span> <span class='kw'>&lt;-</span> <span class='no'>input</span>$<span class='no'>cols</span>
    <span class='no'>data</span> <span class='kw'>&lt;-</span> <span class='fu'><a href='https://rdrr.io/r/base/get.html'>get</a></span>(<span class='no'>input</span>$<span class='no'>data</span>)

    <span class='kw'>if</span> (<span class='fu'><a href='https://rdrr.io/r/base/length.html'>length</a></span>(<span class='no'>cols</span>) <span class='kw'>==</span> <span class='fl'>2</span>) {
      <span class='fu'><a href='https://rdrr.io/r/base/plot.html'>plot</a></span>(<span class='no'>data</span><span class='kw'>[[</span> <span class='no'>cols</span>[<span class='fl'>1</span>] ]], <span class='no'>data</span><span class='kw'>[[</span> <span class='no'>cols</span>[<span class='fl'>2</span>] ]])
    }
  })
}

<span class='fu'><a href='shinyApp.html'>shinyApp</a></span>(<span class='no'>ui</span>, <span class='no'>server</span>)
}</pre>
</div>


```
