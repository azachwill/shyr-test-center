---
title: "Create a reactive expression â€” reactive"
---

```{=html}
<div class="reference">
  <small class="dont-index pkg-version">v1.7.3</small><small class="dont-index pipe">|</small><small class="dont-index github-source">Source: <a href="https://github.com/rstudio/shiny/blob/v1.7.3/R/reactives.R" class="external-link"><code>R/reactives.R</code></a></small>

  <div data-section="description"><h3>Description</h3><p>Wraps a normal expression to create a reactive expression. Conceptually, a
reactive expression is a expression whose result will change over time.</p></div>

  <div data-section="usage"><div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">reactive</span>(</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>  x,</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a>  <span class="at">env =</span> <span class="fu">parent.frame</span>(),</span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>  <span class="at">quoted =</span> <span class="cn">FALSE</span>,</span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>  ...,</span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a>  <span class="at">label =</span> <span class="cn">NULL</span>,</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a>  <span class="at">domain =</span> <span class="fu">getDefaultReactiveDomain</span>(),</span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a>  <span class="at">..stacktraceon =</span> <span class="cn">TRUE</span></span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a>)</span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a><span class="fu">is.reactive</span>(x)</span></code></pre></div></div>

  <div data-section="arguments">
    <h3 id="arguments">Arguments</h3>
    <dl><dt>x</dt>
<dd><p>For <code>is.reactive()</code>, an object to test. For <code>reactive()</code>, an expression. When passing in a <code><a href="https://rlang.r-lib.org/reference/defusing-advanced.html" class="external-link">quo()</a></code>sure with <code>reactive()</code>, remember to use <code><a href="https://rlang.r-lib.org/reference/inject.html" class="external-link">rlang::inject()</a></code> to distinguish that you are passing in the content of your quosure, not the expression of the quosure.</p></dd>


<dt>env</dt>
<dd><p>The parent environment for the reactive expression. By default,
this is the calling environment, the same as when defining an ordinary
non-reactive expression. If <code>x</code> is a quosure and <code>quoted</code> is <code>TRUE</code>,
then <code>env</code> is ignored.</p></dd>


<dt>quoted</dt>
<dd><p>If it is <code>TRUE</code>, then the <code><a href="https://rdrr.io/r/base/substitute.html" class="external-link">quote()</a></code>ed value of <code>x</code>
will be used when <code>x</code> is evaluated. If <code>x</code> is a quosure and you
would like to use its expression as a value for <code>x</code>, then you must set
<code>quoted</code> to <code>TRUE</code>.</p></dd>


<dt>...</dt>
<dd><p>Not used.</p></dd>


<dt>label</dt>
<dd><p>A label for the reactive expression, useful for debugging.</p></dd>


<dt>domain</dt>
<dd><p>See <a href="domains.html">domains</a>.</p></dd>


<dt>..stacktraceon</dt>
<dd><p>Advanced use only. For stack manipulation purposes; see
<code><a href="stacktrace.html">stacktrace()</a></code>.</p></dd>

</dl></div>
  <div data-section="value">
    <h3 id="value">Value</h3>
    

<p>a function, wrapped in a S3 class "reactive"</p>
  </div>
  <div data-section="details">
    <h3 id="details">Details</h3>
    <p>Reactive expressions are expressions that can read reactive values and call
other reactive expressions. Whenever a reactive value changes, any reactive
expressions that depended on it are marked as "invalidated" and will
automatically re-execute if necessary. If a reactive expression is marked as
invalidated, any other reactive expressions that recently called it are also
marked as invalidated. In this way, invalidations ripple through the
expressions that depend on each other.</p>
<p>See the <a href="https://shyr-test-center.netlify.app/tutorial/" class="external-link">Shiny tutorial</a> for
more information about reactive expressions.</p>
  </div>

  <div data-section="examples">
    <h3 id="examples">Examples</h3>
    <div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">library</span>(rlang)</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>values <span class="ot">&lt;-</span> <span class="fu">reactiveValues</span>(<span class="at">A=</span><span class="dv">1</span>)</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>reactiveB <span class="ot">&lt;-</span> <span class="fu">reactive</span>({</span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>  values<span class="sc">$</span>A <span class="sc">+</span> <span class="dv">1</span></span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a>})</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a><span class="co"># View the values from the R console with isolate()</span></span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a><span class="fu">isolate</span>(<span class="fu">reactiveB</span>())</span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a><span class="co"># 2</span></span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a><span class="co"># To store expressions for later conversion to reactive, use quote()</span></span>
<span id="cb1-12"><a href="#cb1-12" tabindex="-1"></a>myquo <span class="ot">&lt;-</span> rlang<span class="sc">::</span><span class="fu">quo</span>(values<span class="sc">$</span>A <span class="sc">+</span> <span class="dv">2</span>)</span>
<span id="cb1-13"><a href="#cb1-13" tabindex="-1"></a><span class="co"># Unexpected value! Sending a quosure directly will not work as expected.</span></span>
<span id="cb1-14"><a href="#cb1-14" tabindex="-1"></a>reactiveC <span class="ot">&lt;-</span> <span class="fu">reactive</span>(myquo)</span>
<span id="cb1-15"><a href="#cb1-15" tabindex="-1"></a><span class="co"># We'd hope for `3`, but instead we get the quosure that was supplied.</span></span>
<span id="cb1-16"><a href="#cb1-16" tabindex="-1"></a><span class="fu">isolate</span>(<span class="fu">reactiveC</span>())</span>
<span id="cb1-17"><a href="#cb1-17" tabindex="-1"></a></span>
<span id="cb1-18"><a href="#cb1-18" tabindex="-1"></a><span class="co"># Instead, the quosure should be `rlang::inject()`ed</span></span>
<span id="cb1-19"><a href="#cb1-19" tabindex="-1"></a>reactiveD <span class="ot">&lt;-</span> rlang<span class="sc">::</span><span class="fu">inject</span>(<span class="fu">reactive</span>(<span class="sc">!!</span>myquo))</span>
<span id="cb1-20"><a href="#cb1-20" tabindex="-1"></a><span class="fu">isolate</span>(<span class="fu">reactiveD</span>())</span>
<span id="cb1-21"><a href="#cb1-21" tabindex="-1"></a><span class="co"># 3</span></span>
<span id="cb1-22"><a href="#cb1-22" tabindex="-1"></a></span>
<span id="cb1-23"><a href="#cb1-23" tabindex="-1"></a><span class="co"># (Legacy) Can use quoted expressions</span></span>
<span id="cb1-24"><a href="#cb1-24" tabindex="-1"></a>expr <span class="ot">&lt;-</span> <span class="fu">quote</span>({ values<span class="sc">$</span>A <span class="sc">+</span> <span class="dv">3</span> })</span>
<span id="cb1-25"><a href="#cb1-25" tabindex="-1"></a>reactiveE <span class="ot">&lt;-</span> <span class="fu">reactive</span>(expr, <span class="at">quoted =</span> <span class="cn">TRUE</span>)</span>
<span id="cb1-26"><a href="#cb1-26" tabindex="-1"></a><span class="fu">isolate</span>(<span class="fu">reactiveE</span>())</span>
<span id="cb1-27"><a href="#cb1-27" tabindex="-1"></a><span class="co"># 4</span></span></code></pre></div>
  </div>
</div>
```
