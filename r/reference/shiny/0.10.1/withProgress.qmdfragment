---
title: "withProgress"
---

```{=html}

<pre class="code"><code class="r"><div>withProgress(expr, min&nbsp;=&nbsp;0, max&nbsp;=&nbsp;1, value&nbsp;=&nbsp;min + (max - min) * 0.1, message&nbsp;=&nbsp;NULL, detail&nbsp;=&nbsp;NULL, session&nbsp;=&nbsp;getDefaultReactiveDomain(), env&nbsp;=&nbsp;parent.frame(), quoted&nbsp;=&nbsp;FALSE)</div>
<div>setProgress(value&nbsp;=&nbsp;NULL, message&nbsp;=&nbsp;NULL, detail&nbsp;=&nbsp;NULL, session&nbsp;=&nbsp;getDefaultReactiveDomain())</div>
<div>incProgress(amount&nbsp;=&nbsp;0.1, message&nbsp;=&nbsp;NULL, detail&nbsp;=&nbsp;NULL, session&nbsp;=&nbsp;getDefaultReactiveDomain())</div></code></pre>

<h3 data-swiftype-index="false">Arguments</h3>
<table class="arguments">
  <tr>
    <th>expr</th>
    <td>The work to be done. This expression should contain calls to
<code>setProgress</code>.</td>
  </tr>
  <tr>
    <th>min</th>
    <td>The value that represents the starting point of the progress bar.
Must be less tham <code>max</code>. Default is 0.</td>
  </tr>
  <tr>
    <th>max</th>
    <td>The value that represents the end of the progress bar. Must be
greater than <code>min</code>. Default is 1.</td>
  </tr>
  <tr>
    <th>value</th>
    <td>Single-element numeric vector; the value at which to set the
  progress bar, relative to <code>min</code> and <code>max</code>. <code>NULL</code> hides the
  progress bar, if it is currently visible.</td>
  </tr>
  <tr>
    <th>message</th>
    <td>A single-element character vector; the message to be displayed
to the user, or <code>NULL</code> to hide the current message (if any).</td>
  </tr>
  <tr>
    <th>detail</th>
    <td>A single-element character vector; the detail message to be
displayed to the user, or <code>NULL</code> to hide the current detail message
(if any). The detail message will be shown with a de-emphasized appearance
relative to <code>message</code>.</td>
  </tr>
  <tr>
    <th>session</th>
    <td>The Shiny session object, as provided by <code>shinyServer</code> to
the server function. The default is to automatically find the session by
using the current reactive domain.</td>
  </tr>
  <tr>
    <th>env</th>
    <td>The environment in which <code>expr</code> should be evaluated.</td>
  </tr>
  <tr>
    <th>quoted</th>
    <td>Whether <code>expr</code> is a quoted expression (this is not
common).</td>
  </tr>
  <tr>
    <th>amount</th>
    <td>For <code>incProgress</code>, the amount to increment the status bar.
Default is 0.1.</td>
  </tr>
</table>

<div data-section="Reporting progress (functional API)">
  <h3 data-swiftype-index="false">Reporting progress (functional API)</h3>
  
</div>

<div data-section="Description">
  <h3 data-swiftype-index="false">Description</h3>
  
  <p>Reports progress to the user during long-running operations.</p>

</div>

<div data-section="Details">
  <h3 data-swiftype-index="false">Details</h3>
  
  <p>This package exposes two distinct programming APIs for working with progress.
Using <code>withProgress</code> with <code>incProgress</code> or <code>setProgress</code>
provide a simple function-based interface, while the <code><a href='Progress.html'>Progress</a></code>
reference class provides an object-oriented API.</p>

  <p>Use <code>withProgress</code> to wrap the scope of your work; doing so will cause a
new progress panel to be created, and it will be displayed the first time
<code>incProgress</code> or <code>setProgress</code> are called. When <code>withProgress</code>
exits, the corresponding progress panel will be removed.</p>

  <p>The <code>incProgress</code> function increments the status bar by a specified
amount, whereas the <code>setProgress</code> function sets it to a specific value,
and can also set the text displayed.</p>

  <p>Generally, <code>withProgress</code>/<code>incProgress</code>/<code>setProgress</code> should
be sufficient; the exception is if the work to be done is asynchronous (this
is not common) or otherwise cannot be encapsulated by a single scope. In that
case, you can use the <code>Progress</code> reference class.</p>

</div>

<h3 id="examples" data-swiftype-index="false">Examples</h3>
<pre class="examples"><div class='input'>## &lt;strong&gt;Not run&lt;/strong&gt;: 
# # server.R
# shinyServer(function(input, output) {
#   output$plot &lt;- renderPlot({
#     withProgress(message = &#39;Calculation in progress&#39;,
#                  detail = &#39;This may take a while...&#39;, value = 0, {
#       for (i in 1:15) {
#         incProgress(1/15)
#         Sys.sleep(0.25)
#       }
#     })
#     plot(cars)
#   })
# })
# ## &lt;strong&gt;End(Not run)&lt;/strong&gt;
</div></pre>
<!-- <ul>
  <li>incProgress</li><li>setProgress</li><li>withProgress</li>
</ul>
<ul>
  
</ul> -->
  
<div data-swiftype-index="false">
<h3>See also</h3>

<code><a href='Progress.html'>Progress</a></code>

</div>
```
