---
title: "observeEvent"
---

```{=html}

<pre class="code"><code class="r"><span class="functioncall"><a href='observeEvent.html'>observeEvent</a></span><span class="keyword">(</span><span class="symbol">eventExpr</span><span class="keyword">,</span> <span class="symbol">handlerExpr</span><span class="keyword">,</span> <span class="argument">event.env</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="functioncall"><a href='http://www.rdocumentation.org/packages/base/topics/sys.parent'>parent.frame</a></span><span class="keyword">(</span><span class="keyword">)</span><span class="keyword">,</span>
  <span class="argument">event.quoted</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">FALSE</span><span class="keyword">,</span> <span class="argument">handler.env</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="functioncall"><a href='http://www.rdocumentation.org/packages/base/topics/sys.parent'>parent.frame</a></span><span class="keyword">(</span><span class="keyword">)</span><span class="keyword">,</span>
  <span class="argument">handler.quoted</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">FALSE</span><span class="keyword">,</span> <span class="argument">label</span>&nbsp;<span class="argument">=</span>&nbsp;NULL<span class="keyword">,</span> <span class="argument">suspended</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">FALSE</span><span class="keyword">,</span> <span class="argument">priority</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">0</span><span class="keyword">,</span>
  <span class="argument">domain</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="functioncall"><a href='domains.html'>getDefaultReactiveDomain</a></span><span class="keyword">(</span><span class="keyword">)</span><span class="keyword">,</span> <span class="argument">autoDestroy</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">TRUE</span><span class="keyword">,</span>
  <span class="argument">ignoreNULL</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">TRUE</span><span class="keyword">,</span> <span class="argument">ignoreInit</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">FALSE</span><span class="keyword">,</span> <span class="argument">once</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">FALSE</span><span class="keyword">)</span>

<span class="functioncall"><a href='observeEvent.html'>eventReactive</a></span><span class="keyword">(</span><span class="symbol">eventExpr</span><span class="keyword">,</span> <span class="symbol">valueExpr</span><span class="keyword">,</span> <span class="argument">event.env</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="functioncall"><a href='http://www.rdocumentation.org/packages/base/topics/sys.parent'>parent.frame</a></span><span class="keyword">(</span><span class="keyword">)</span><span class="keyword">,</span>
  <span class="argument">event.quoted</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">FALSE</span><span class="keyword">,</span> <span class="argument">value.env</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="functioncall"><a href='http://www.rdocumentation.org/packages/base/topics/sys.parent'>parent.frame</a></span><span class="keyword">(</span><span class="keyword">)</span><span class="keyword">,</span> <span class="argument">value.quoted</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">FALSE</span><span class="keyword">,</span>
  <span class="argument">label</span>&nbsp;<span class="argument">=</span>&nbsp;NULL<span class="keyword">,</span> <span class="argument">domain</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="functioncall"><a href='domains.html'>getDefaultReactiveDomain</a></span><span class="keyword">(</span><span class="keyword">)</span><span class="keyword">,</span> <span class="argument">ignoreNULL</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">TRUE</span><span class="keyword">,</span>
  <span class="argument">ignoreInit</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">FALSE</span><span class="keyword">)</span></code></pre>

<h3 data-swiftype-index="false">Arguments</h3>
<table class="arguments">
  <tr>
    <th>eventExpr</th>
    <td>A (quoted or unquoted) expression that represents the event;
this can be a simple reactive value like <code>input$click</code>, a call to a
reactive expression like <code>dataset()</code>, or even a complex expression
inside curly braces</td>
  </tr>
  <tr>
    <th>handlerExpr</th>
    <td>The expression to call whenever <code>eventExpr</code> is
invalidated. This should be a side-effect-producing action (the return
value will be ignored). It will be executed within an <code><a href='isolate.html'>isolate</a></code>
scope.</td>
  </tr>
  <tr>
    <th>event.env</th>
    <td>The parent environment for <code>eventExpr</code>. By default,
this is the calling environment.</td>
  </tr>
  <tr>
    <th>event.quoted</th>
    <td>Is the <code>eventExpr</code> expression quoted? By default,
this is <code>FALSE</code>. This is useful when you want to use an expression
that is stored in a variable; to do so, it must be quoted with
<code>quote()</code>.</td>
  </tr>
  <tr>
    <th>handler.env</th>
    <td>The parent environment for <code>handlerExpr</code>. By default,
this is the calling environment.</td>
  </tr>
  <tr>
    <th>handler.quoted</th>
    <td>Is the <code>handlerExpr</code> expression quoted? By
default, this is <code>FALSE</code>. This is useful when you want to use an
expression that is stored in a variable; to do so, it must be quoted with
<code>quote()</code>.</td>
  </tr>
  <tr>
    <th>label</th>
    <td>A label for the observer or reactive, useful for debugging.</td>
  </tr>
  <tr>
    <th>suspended</th>
    <td>If <code>TRUE</code>, start the observer in a suspended state. If
<code>FALSE</code> (the default), start in a non-suspended state.</td>
  </tr>
  <tr>
    <th>priority</th>
    <td>An integer or numeric that controls the priority with which
this observer should be executed. An observer with a given priority level
will always execute sooner than all observers with a lower priority level.
Positive, negative, and zero values are allowed.</td>
  </tr>
  <tr>
    <th>domain</th>
    <td>See <a href='domains.html'>domains</a>.</td>
  </tr>
  <tr>
    <th>autoDestroy</th>
    <td>If <code>TRUE</code> (the default), the observer will be
automatically destroyed when its domain (if any) ends.</td>
  </tr>
  <tr>
    <th>ignoreNULL</th>
    <td>Whether the action should be triggered (or value
calculated, in the case of <code>eventReactive</code>) when the input is
<code>NULL</code>. See Details.</td>
  </tr>
  <tr>
    <th>ignoreInit</th>
    <td>If <code>TRUE</code>, then, when this <code>observeEvent</code> is
first created/initialized, ignore the <code>handlerExpr</code> (the second
argument), whether it is otherwise supposed to run or not. The default is
<code>FALSE</code>. See Details.</td>
  </tr>
  <tr>
    <th>once</th>
    <td>Whether this <code>observeEvent</code> should be immediately destroyed
after the first time that the code in <code>handlerExpr</code> is run. This
pattern is useful when you want to subscribe to a event that should only
happen once.</td>
  </tr>
  <tr>
    <th>valueExpr</th>
    <td>The expression that produces the return value of the
<code>eventReactive</code>. It will be executed within an <code><a href='isolate.html'>isolate</a></code>
scope.</td>
  </tr>
  <tr>
    <th>value.env</th>
    <td>The parent environment for <code>valueExpr</code>. By default,
this is the calling environment.</td>
  </tr>
  <tr>
    <th>value.quoted</th>
    <td>Is the <code>valueExpr</code> expression quoted? By default,
this is <code>FALSE</code>. This is useful when you want to use an expression
that is stored in a variable; to do so, it must be quoted with <code>quote()</code>.</td>
  </tr>
</table>

<div data-section="Value">
  <h3 data-swiftype-index="false">Value</h3>

  <p><dl>
<code>observeEvent</code> returns an observer reference class object (see
  <code><a href='observe.html'>observe</a></code>). <code>eventReactive</code> returns a reactive expression
  object (see <code><a href='reactive.html'>reactive</a></code>).
</dl></p>

</div>

<div data-section="Description">
  <h3 data-swiftype-index="false">Description</h3>

  <p>Respond to &quot;event-like&quot; reactive inputs, values, and expressions.</p>

</div>

<div data-section="Details">
  <h3 data-swiftype-index="false">Details</h3>

  <p>Shiny&#39;s reactive programming framework is primarily designed for calculated
values (reactive expressions) and side-effect-causing actions (observers)
that respond to <em>any</em> of their inputs changing. That&#39;s often what is
desired in Shiny apps, but not always: sometimes you want to wait for a
specific action to be taken from the user, like clicking an
<code><a href='actionButton.html'>actionButton</a></code>, before calculating an expression or taking an
action. A reactive value or expression that is used to trigger other
calculations in this way is called an <em>event</em>.</p>

  <p>These situations demand a more imperative, &quot;event handling&quot; style of
programming that is possible--but not particularly intuitive--using the
reactive programming primitives <code><a href='observe.html'>observe</a></code> and
<code><a href='isolate.html'>isolate</a></code>. <code>observeEvent</code> and <code>eventReactive</code> provide
straightforward APIs for event handling that wrap <code>observe</code> and
<code>isolate</code>.</p>

  <p>Use <code>observeEvent</code> whenever you want to <em>perform an action</em> in
response to an event. (Note that &quot;recalculate a value&quot; does not generally
count as performing an action--see <code>eventReactive</code> for that.) The first
argument is the event you want to respond to, and the second argument is a
function that should be called whenever the event occurs.</p>

  <p>Use <code>eventReactive</code> to create a <em>calculated value</em> that only
updates in response to an event. This is just like a normal
<a href='reactive.html'>reactive expression</a> except it ignores all the usual
invalidations that come from its reactive dependencies; it only invalidates
in response to the given event.</p>

</div>

<div data-section="&lt;code&gt;ignoreNULL&lt;/code&gt; and &lt;code&gt;ignoreInit&lt;/code&gt;">
  <h3 data-swiftype-index="false">&lt;code&gt;ignoreNULL&lt;/code&gt; and &lt;code&gt;ignoreInit&lt;/code&gt;</h3>

  <p></p>

  <p>Both <code>observeEvent</code> and <code>eventReactive</code> take an <code>ignoreNULL</code>
parameter that affects behavior when the <code>eventExpr</code> evaluates to
<code>NULL</code> (or in the special case of an <code><a href='actionButton.html'>actionButton</a></code>,
<code>0</code>). In these cases, if <code>ignoreNULL</code> is <code>TRUE</code>, then an
<code>observeEvent</code> will not execute and an <code>eventReactive</code> will raise a
silent <a href='validate.html'>validation</a> error. This is useful behavior if you
don&#39;t want to do the action or calculation when your app first starts, but
wait for the user to initiate the action first (like a &quot;Submit&quot; button);
whereas <code>ignoreNULL=FALSE</code> is desirable if you want to initially perform
the action/calculation and just let the user re-initiate it (like a
&quot;Recalculate&quot; button).</p>

  <p>Unlike what happens for <code>ignoreNULL</code>, only <code>observeEvent</code> takes in an
<code>ignoreInit</code> argument. By default, <code>observeEvent</code> will run right when
it is created (except if, at that moment, <code>eventExpr</code> evaluates to <code>NULL</code>
and <code>ignoreNULL</code> is <code>TRUE</code>). But when responding to a click of an action
button, it may often be useful to set <code>ignoreInit</code> to <code>TRUE</code>. For
example, if you&#39;re setting up an <code>observeEvent</code> for a dynamically created
button, then <code>ignoreInit = TRUE</code> will guarantee that the action (in
<code>handlerExpr</code>) will only be triggered when the button is actually clicked,
instead of also being triggered when it is created/initialized.</p>

  <p>Even though <code>ignoreNULL</code> and <code>ignoreInit</code> can be used for similar
purposes they are independent from one another. Here&#39;s the result of combining
these:</p>

  <p><dl>
  <dt><code>ignoreNULL = TRUE</code> and <code>ignoreInit = FALSE</code></dt><dd>
     This is the default. This combination means that <code>handlerExpr</code> will
     run every time that <code>eventExpr</code> is not <code>NULL</code>. If, at the time
     of the <code>observeEvent</code>&#39;s creation, <code>handleExpr</code> happens to
     <em>not</em> be <code>NULL</code>, then the code runs.
  </dd></p>

  <p><dt><code>ignoreNULL = FALSE</code> and <code>ignoreInit = FALSE</code></dt><dd>
     This combination means that <code>handlerExpr</code> will run every time no
     matter what.
  </dd></p>

  <p><dt><code>ignoreNULL = FALSE</code> and <code>ignoreInit = TRUE</code></dt><dd>
     This combination means that <code>handlerExpr</code> will <em>not</em> run when
     the <code>observeEvent</code> is created (because <code>ignoreInit = TRUE</code>),
     but it will run every other time.
  </dd></p>

  <p><dt><code>ignoreNULL = TRUE</code> and <code>ignoreInit = TRUE</code></dt><dd>
     This combination means that <code>handlerExpr</code> will <em>not</em> run when
     the <code>observeEvent</code> is created (because <code>ignoreInit = TRUE</code>).
     After that, <code>handlerExpr</code> will run every time that <code>eventExpr</code>
     is not <code>NULL</code>.
  </dd></p>

  <p></dl></p>

  <p></p>

</div>

<h3 id="examples" data-swiftype-index="false">Examples</h3>
<pre class="examples"><code class="r"><div class='input'><span class="comment">## Only run this example in interactive R sessions</span>
<span class="keyword">if</span> <span class="keyword">(</span><span class="functioncall"><a href='http://www.rdocumentation.org/packages/base/topics/interactive'>interactive</a></span><span class="keyword">(</span><span class="keyword">)</span><span class="keyword">)</span> <span class="keyword">{</span>

  <span class="comment">## App 1: Sample usage</span>
  <span class="functioncall"><a href='shinyApp.html'>shinyApp</a></span><span class="keyword">(</span>
    <span class="argument">ui</span> <span class="argument">=</span> <span class="functioncall"><a href='fluidPage.html'>fluidPage</a></span><span class="keyword">(</span>
      <span class="functioncall"><a href='column.html'>column</a></span><span class="keyword">(</span><span class="number">4</span><span class="keyword">,</span>
        <span class="functioncall"><a href='numericInput.html'>numericInput</a></span><span class="keyword">(</span><span class="string">"x"</span><span class="keyword">,</span> <span class="string">"Value"</span><span class="keyword">,</span> <span class="number">5</span><span class="keyword">)</span><span class="keyword">,</span>
        <span class="functioncall"><a href='builder.html'>br</a></span><span class="keyword">(</span><span class="keyword">)</span><span class="keyword">,</span>
        <span class="functioncall"><a href='actionButton.html'>actionButton</a></span><span class="keyword">(</span><span class="string">"button"</span><span class="keyword">,</span> <span class="string">"Show"</span><span class="keyword">)</span>
      <span class="keyword">)</span><span class="keyword">,</span>
      <span class="functioncall"><a href='column.html'>column</a></span><span class="keyword">(</span><span class="number">8</span><span class="keyword">,</span> <span class="functioncall"><a href='tableOutput.html'>tableOutput</a></span><span class="keyword">(</span><span class="string">"table"</span><span class="keyword">)</span><span class="keyword">)</span>
    <span class="keyword">)</span><span class="keyword">,</span>
    <span class="argument">server</span> <span class="argument">=</span> <span class="keyword">function</span><span class="keyword">(</span><span class="formalargs">input</span><span class="keyword">,</span> <span class="formalargs">output</span><span class="keyword">)</span> <span class="keyword">{</span>
      <span class="comment"># Take an action every time button is pressed;</span>
      <span class="comment"># here, we just print a message to the console</span>
      <span class="functioncall"><a href='observeEvent.html'>observeEvent</a></span><span class="keyword">(</span><span class="symbol">input</span><span class="keyword">$</span><span class="symbol">button</span><span class="keyword">,</span> <span class="keyword">{</span>
        <span class="functioncall"><a href='http://www.rdocumentation.org/packages/base/topics/cat'>cat</a></span><span class="keyword">(</span><span class="string">"Showing"</span><span class="keyword">,</span> <span class="symbol">input</span><span class="keyword">$</span><span class="symbol">x</span><span class="keyword">,</span> <span class="string">"rows\n"</span><span class="keyword">)</span>
      <span class="keyword">}</span><span class="keyword">)</span>
      <span class="comment"># Take a reactive dependency on input$button, but</span>
      <span class="comment"># not on any of the stuff inside the function</span>
      <span class="symbol">df</span> <span class="assignement">&lt;-</span> <span class="functioncall"><a href='observeEvent.html'>eventReactive</a></span><span class="keyword">(</span><span class="symbol">input</span><span class="keyword">$</span><span class="symbol">button</span><span class="keyword">,</span> <span class="keyword">{</span>
        <span class="functioncall"><a href='http://www.rdocumentation.org/packages/utils/topics/head'>head</a></span><span class="keyword">(</span><span class="symbol">cars</span><span class="keyword">,</span> <span class="symbol">input</span><span class="keyword">$</span><span class="symbol">x</span><span class="keyword">)</span>
      <span class="keyword">}</span><span class="keyword">)</span>
      <span class="symbol">output</span><span class="keyword">$</span><span class="symbol">table</span> <span class="assignement">&lt;-</span> <span class="functioncall"><a href='renderTable.html'>renderTable</a></span><span class="keyword">(</span><span class="keyword">{</span>
        <span class="functioncall"><a href='http://www.rdocumentation.org/packages/stats/topics/Fdist'>df</a></span><span class="keyword">(</span><span class="keyword">)</span>
      <span class="keyword">}</span><span class="keyword">)</span>
    <span class="keyword">}</span>
  <span class="keyword">)</span>

  <span class="comment">## App 2: Using `once`</span>
  <span class="functioncall"><a href='shinyApp.html'>shinyApp</a></span><span class="keyword">(</span>
    <span class="argument">ui</span> <span class="argument">=</span> <span class="functioncall"><a href='bootstrapPage.html'>basicPage</a></span><span class="keyword">(</span> <span class="functioncall"><a href='actionButton.html'>actionButton</a></span><span class="keyword">(</span><span class="string">"go"</span><span class="keyword">,</span> <span class="string">"Go"</span><span class="keyword">)</span><span class="keyword">)</span><span class="keyword">,</span>
    <span class="argument">server</span> <span class="argument">=</span> <span class="keyword">function</span><span class="keyword">(</span><span class="formalargs">input</span><span class="keyword">,</span> <span class="formalargs">output</span><span class="keyword">,</span> <span class="formalargs">session</span><span class="keyword">)</span> <span class="keyword">{</span>
      <span class="functioncall"><a href='observeEvent.html'>observeEvent</a></span><span class="keyword">(</span><span class="symbol">input</span><span class="keyword">$</span><span class="symbol">go</span><span class="keyword">,</span> <span class="keyword">{</span>
        <span class="functioncall"><a href='http://www.rdocumentation.org/packages/base/topics/print'>print</a></span><span class="keyword">(</span><span class="functioncall"><a href='http://www.rdocumentation.org/packages/base/topics/paste'>paste</a></span><span class="keyword">(</span><span class="string">"This will only be printed once; all"</span><span class="keyword">,</span>
              <span class="string">"subsequent button clicks won't do anything"</span><span class="keyword">)</span><span class="keyword">)</span>
      <span class="keyword">}</span><span class="keyword">,</span> <span class="argument">once</span> <span class="argument">=</span> <span class="number">TRUE</span><span class="keyword">)</span>
    <span class="keyword">}</span>
  <span class="keyword">)</span>

  <span class="comment">## App 3: Using `ignoreInit` and `once`</span>
  <span class="functioncall"><a href='shinyApp.html'>shinyApp</a></span><span class="keyword">(</span>
    <span class="argument">ui</span> <span class="argument">=</span> <span class="functioncall"><a href='bootstrapPage.html'>basicPage</a></span><span class="keyword">(</span><span class="functioncall"><a href='actionButton.html'>actionButton</a></span><span class="keyword">(</span><span class="string">"go"</span><span class="keyword">,</span> <span class="string">"Go"</span><span class="keyword">)</span><span class="keyword">)</span><span class="keyword">,</span>
    <span class="argument">server</span> <span class="argument">=</span> <span class="keyword">function</span><span class="keyword">(</span><span class="formalargs">input</span><span class="keyword">,</span> <span class="formalargs">output</span><span class="keyword">,</span> <span class="formalargs">session</span><span class="keyword">)</span> <span class="keyword">{</span>
      <span class="functioncall"><a href='observeEvent.html'>observeEvent</a></span><span class="keyword">(</span><span class="symbol">input</span><span class="keyword">$</span><span class="symbol">go</span><span class="keyword">,</span> <span class="keyword">{</span>
        <span class="functioncall"><a href='insertUI.html'>insertUI</a></span><span class="keyword">(</span><span class="string">"#go"</span><span class="keyword">,</span> <span class="string">"afterEnd"</span><span class="keyword">,</span>
                 <span class="functioncall"><a href='actionButton.html'>actionButton</a></span><span class="keyword">(</span><span class="string">"dynamic"</span><span class="keyword">,</span> <span class="string">"click to remove"</span><span class="keyword">)</span><span class="keyword">)</span>

        <span class="comment"># set up an observer that depends on the dynamic</span>
        <span class="comment"># input, so that it doesn't run when the input is</span>
        <span class="comment"># created, and only runs once after that (since</span>
        <span class="comment"># the side effect is remove the input from the DOM)</span>
        <span class="functioncall"><a href='observeEvent.html'>observeEvent</a></span><span class="keyword">(</span><span class="symbol">input</span><span class="keyword">$</span><span class="symbol">dynamic</span><span class="keyword">,</span> <span class="keyword">{</span>
          <span class="functioncall"><a href='removeUI.html'>removeUI</a></span><span class="keyword">(</span><span class="string">"#dynamic"</span><span class="keyword">)</span>
        <span class="keyword">}</span><span class="keyword">,</span> <span class="argument">ignoreInit</span> <span class="argument">=</span> <span class="number">TRUE</span><span class="keyword">,</span> <span class="argument">once</span> <span class="argument">=</span> <span class="number">TRUE</span><span class="keyword">)</span>
      <span class="keyword">}</span><span class="keyword">)</span>
    <span class="keyword">}</span>
  <span class="keyword">)</span>
<span class="keyword">}</span></div></code></pre>
<!-- <ul>
  <li>eventReactive</li><li>observeEvent</li>
</ul>
<ul>
  
</ul> -->

<div data-swiftype-index="false">
<h3>See also</h3>
  <p><code><a href='actionButton.html'>actionButton</a></code></p>
</div>
```
