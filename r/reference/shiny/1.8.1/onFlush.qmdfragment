---
title: "Add callbacks for Shiny session events â€” onFlush"
---

```{=html}
<div class="reference">
  <small class="dont-index pkg-version">v1.8.1</small><small class="dont-index pipe">|</small><small class="dont-index github-source">Source: <a href="https://github.com/rstudio/shiny/blob/v1.8.1/R/shiny.R" class="external-link"><code>R/shiny.R</code></a></small>

  <div data-section="description"><h3>Description</h3><p>These functions are for registering callbacks on Shiny session events.
<code>onFlush</code> registers a function that will be called before Shiny flushes the
reactive system. <code>onFlushed</code> registers a function that will be called after
Shiny flushes the reactive system. <code>onUnhandledError</code> registers a function to
be called when an unhandled error occurs before the session is closed.
<code>onSessionEnded</code> registers a function to be called after the client has
disconnected.</p>
<p>These functions should be called within the application's server function.</p>
<p>All of these functions return a function which can be called with no
arguments to cancel the registration.</p></div>

  <div data-section="usage"><div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">onFlush</span>(fun, <span class="at">once =</span> <span class="cn">TRUE</span>, <span class="at">session =</span> <span class="fu">getDefaultReactiveDomain</span>())</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a><span class="fu">onFlushed</span>(fun, <span class="at">once =</span> <span class="cn">TRUE</span>, <span class="at">session =</span> <span class="fu">getDefaultReactiveDomain</span>())</span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a></span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a><span class="fu">onSessionEnded</span>(fun, <span class="at">session =</span> <span class="fu">getDefaultReactiveDomain</span>())</span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a><span class="fu">onUnhandledError</span>(fun, <span class="at">session =</span> <span class="fu">getDefaultReactiveDomain</span>())</span></code></pre></div></div>

  <div data-section="arguments">
    <h3 id="arguments">Arguments</h3>
    <dl><dt>fun</dt>
<dd><p>A callback function.</p></dd>


<dt>once</dt>
<dd><p>Should the function be run once, and then cleared, or should it
re-run each time the event occurs. (Only for <code>onFlush</code> and
<code>onFlushed</code>.)</p></dd>


<dt>session</dt>
<dd><p>A shiny session object.</p></dd>

</dl></div>
  <div data-section="unhandled-errors">
    <h3 id="unhandled-errors">Unhandled Errors</h3>
    

<p>Unhandled errors are errors that aren't otherwise handled by Shiny or by the
application logic. In other words, they are errors that will either cause the
application to crash or will result in "Error" output in the UI.</p>
<p>You can use <code>onUnhandledError()</code> to register a function that will be called
when an unhandled error occurs. This function will be called with the error
object as its first argument. If the error is fatal and will result in the
session closing, the error condition will have the <code>shiny.error.fatal</code> class.</p>
<p>Note that the <code>onUnhandledError()</code> callbacks cannot be used to prevent the
app from closing or to modify the error condition. Instead, they are intended
to give you an opportunity to log the error or perform other cleanup
operations.</p>
  </div>
  <div data-section="see-also">
    <h3 id="see-also">See also</h3>
    <div class="dont-index"><p><code><a href="onStop.html">onStop()</a></code> for registering callbacks that will be
invoked when the application exits, or when a session ends.</p></div>
  </div>

  <div data-section="examples">
    <h3 id="examples">Examples</h3>
    <div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="cf">if</span> (<span class="cn">FALSE</span>) { <span class="co"># interactive()</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a><span class="fu">library</span>(shiny)</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>ui <span class="ot">&lt;-</span> <span class="fu">fixedPage</span>(</span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>  <span class="fu">markdown</span>(<span class="fu">c</span>(</span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a>    <span class="st">"Set the number to 8 or higher to cause an error"</span>,</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a>    <span class="st">"in the `renderText()` output."</span></span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a>  )),</span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a>  <span class="fu">sliderInput</span>(<span class="st">"number"</span>, <span class="st">"Number"</span>, <span class="dv">0</span>, <span class="dv">10</span>, <span class="dv">4</span>),</span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a>  <span class="fu">textOutput</span>(<span class="st">"text"</span>),</span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a>  <span class="fu">hr</span>(),</span>
<span id="cb1-12"><a href="#cb1-12" tabindex="-1"></a>  <span class="fu">markdown</span>(<span class="fu">c</span>(</span>
<span id="cb1-13"><a href="#cb1-13" tabindex="-1"></a>    <span class="st">"Click the button below to crash the app with an unhandled error"</span>,</span>
<span id="cb1-14"><a href="#cb1-14" tabindex="-1"></a>    <span class="st">"in an `observe()` block."</span></span>
<span id="cb1-15"><a href="#cb1-15" tabindex="-1"></a>  )),</span>
<span id="cb1-16"><a href="#cb1-16" tabindex="-1"></a>  <span class="fu">actionButton</span>(<span class="st">"crash"</span>, <span class="st">"Crash the app!"</span>)</span>
<span id="cb1-17"><a href="#cb1-17" tabindex="-1"></a>)</span>
<span id="cb1-18"><a href="#cb1-18" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" tabindex="-1"></a>log_event <span class="ot">&lt;-</span> <span class="cf">function</span>(level, ...) {</span>
<span id="cb1-20"><a href="#cb1-20" tabindex="-1"></a>  ts <span class="ot">&lt;-</span> <span class="fu">strftime</span>(<span class="fu">Sys.time</span>(), <span class="st">" [%F %T] "</span>)</span>
<span id="cb1-21"><a href="#cb1-21" tabindex="-1"></a>  <span class="fu">message</span>(level, ts, ...)</span>
<span id="cb1-22"><a href="#cb1-22" tabindex="-1"></a>}</span>
<span id="cb1-23"><a href="#cb1-23" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" tabindex="-1"></a>server <span class="ot">&lt;-</span> <span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-25"><a href="#cb1-25" tabindex="-1"></a>  <span class="fu">log_event</span>(<span class="st">"INFO"</span>, <span class="st">"Session started"</span>)</span>
<span id="cb1-26"><a href="#cb1-26" tabindex="-1"></a></span>
<span id="cb1-27"><a href="#cb1-27" tabindex="-1"></a>  <span class="fu">onUnhandledError</span>(<span class="cf">function</span>(err) {</span>
<span id="cb1-28"><a href="#cb1-28" tabindex="-1"></a>    <span class="co"># log the unhandled error</span></span>
<span id="cb1-29"><a href="#cb1-29" tabindex="-1"></a>    level <span class="ot">&lt;-</span> <span class="cf">if</span> (<span class="fu">inherits</span>(err, <span class="st">"shiny.error.fatal"</span>)) <span class="st">"FATAL"</span> <span class="cf">else</span> <span class="st">"ERROR"</span></span>
<span id="cb1-30"><a href="#cb1-30" tabindex="-1"></a>    <span class="fu">log_event</span>(level, <span class="fu">conditionMessage</span>(err))</span>
<span id="cb1-31"><a href="#cb1-31" tabindex="-1"></a>  })</span>
<span id="cb1-32"><a href="#cb1-32" tabindex="-1"></a></span>
<span id="cb1-33"><a href="#cb1-33" tabindex="-1"></a>  <span class="fu">onStop</span>(<span class="cf">function</span>() {</span>
<span id="cb1-34"><a href="#cb1-34" tabindex="-1"></a>    <span class="fu">log_event</span>(<span class="st">"INFO"</span>, <span class="st">"Session ended"</span>)</span>
<span id="cb1-35"><a href="#cb1-35" tabindex="-1"></a>  })</span>
<span id="cb1-36"><a href="#cb1-36" tabindex="-1"></a></span>
<span id="cb1-37"><a href="#cb1-37" tabindex="-1"></a>  <span class="fu">observeEvent</span>(input<span class="sc">$</span>crash, <span class="fu">stop</span>(<span class="st">"Oops, an unhandled error happened!"</span>))</span>
<span id="cb1-38"><a href="#cb1-38" tabindex="-1"></a></span>
<span id="cb1-39"><a href="#cb1-39" tabindex="-1"></a>  output<span class="sc">$</span>text <span class="ot">&lt;-</span> <span class="fu">renderText</span>({</span>
<span id="cb1-40"><a href="#cb1-40" tabindex="-1"></a>    <span class="cf">if</span> (input<span class="sc">$</span>number <span class="sc">&gt;</span> <span class="dv">7</span>) {</span>
<span id="cb1-41"><a href="#cb1-41" tabindex="-1"></a>      <span class="fu">stop</span>(<span class="st">"that's too high!"</span>)</span>
<span id="cb1-42"><a href="#cb1-42" tabindex="-1"></a>    }</span>
<span id="cb1-43"><a href="#cb1-43" tabindex="-1"></a>    <span class="fu">sprintf</span>(<span class="st">"You picked number %d."</span>, input<span class="sc">$</span>number)</span>
<span id="cb1-44"><a href="#cb1-44" tabindex="-1"></a>  })</span>
<span id="cb1-45"><a href="#cb1-45" tabindex="-1"></a>}</span>
<span id="cb1-46"><a href="#cb1-46" tabindex="-1"></a></span>
<span id="cb1-47"><a href="#cb1-47" tabindex="-1"></a><span class="fu">shinyApp</span>(ui, server)</span>
<span id="cb1-48"><a href="#cb1-48" tabindex="-1"></a>}</span></code></pre></div>
  </div>
</div>
```
