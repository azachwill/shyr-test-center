---
title: "markRenderFunction"
---

```{=html}

<pre class="code"><code class="r"><span class="functioncall"><a href='markRenderFunction.html'>markRenderFunction</a></span><span class="keyword">(</span><span class="symbol">uiFunc</span><span class="keyword">,</span> <span class="symbol">renderFunc</span><span class="keyword">,</span> <span class="argument">outputArgs</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="functioncall"><a href='http://www.rdocumentation.org/packages/base/topics/list'>list</a></span><span class="keyword">(</span><span class="keyword">)</span><span class="keyword">)</span></code></pre>

<h3 data-swiftype-index="false">Arguments</h3>
<table class="arguments">
  <tr>
    <th>uiFunc</th>
    <td>A function that renders Shiny UI. Must take a single argument:
an output ID.</td>
  </tr>
  <tr>
    <th>renderFunc</th>
    <td>A function that is suitable for assigning to a Shiny output
slot.</td>
  </tr>
  <tr>
    <th>outputArgs</th>
    <td>A list of arguments to pass to the <code>uiFunc</code>. Render
functions should include <code>outputArgs = list()</code> in their own parameter
list, and pass through the value to <code>markRenderFunction</code>, to allow
app authors to customize outputs. (Currently, this is only supported for
dynamically generated UIs, such as those created by Shiny code snippets
embedded in R Markdown documents).</td>
  </tr>
</table>

<div data-section="Value">
  <h3 data-swiftype-index="false">Value</h3>

  <p><dl>
The <code>renderFunc</code> function, with annotations.
</dl></p>

</div>

<div data-section="Description">
  <h3 data-swiftype-index="false">Description</h3>

  <p>Should be called by implementers of <code>renderXXX</code> functions in order to
mark their return values as Shiny render functions, and to provide a hint to
Shiny regarding what UI function is most commonly used with this type of
render function. This can be used in R Markdown documents to create complete
output widgets out of just the render function.</p>

</div>
<!-- <ul>
  <li>markRenderFunction</li>
</ul>
<ul>
  
</ul> -->

```
