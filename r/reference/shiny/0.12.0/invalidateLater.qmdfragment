---
title: "invalidateLater"
---

```{=html}

<pre class="code"><code class="r"><span class="functioncall"><a href='invalidateLater.html'>invalidateLater</a></span><span class="keyword">(</span><span class="symbol">millis</span><span class="keyword">,</span> <span class="symbol">session</span><span class="keyword">)</span></code></pre>

<h3 data-swiftype-index="false">Arguments</h3>
<table class="arguments">
  <tr>
    <th>millis</th>
    <td>Approximate milliseconds to wait before invalidating the
current reactive context.</td>
  </tr>
  <tr>
    <th>session</th>
    <td>A session object. This is needed to cancel any scheduled
  invalidations after a user has ended the session. If <code>NULL</code>, then
  this invalidation will not be tied to any session, and so it will still
  occur.</td>
  </tr>
</table>

<div data-section="Description">
  <h3 data-swiftype-index="false">Description</h3>

  <p>Schedules the current reactive context to be invalidated in the given number
of milliseconds.</p>

</div>

<div data-section="Details">
  <h3 data-swiftype-index="false">Details</h3>

  <p>If this is placed within an observer or reactive expression, that object will
be invalidated (and re-execute) after the interval has passed. The
re-execution will reset the invalidation flag, so in a typical use case, the
object will keep re-executing and waiting for the specified interval. It&#39;s
possible to stop this cycle by adding conditional logic that prevents the
<code>invalidateLater</code> from being run.</p>

</div>

<h3 id="examples" data-swiftype-index="false">Examples</h3>
<pre class="examples"><code class="r"><div class='input'><span class="comment">## Not run: ------------------------------------</span>
<span class="comment"># shinyServer(function(input, output, session) {</span>
<span class="comment"># </span>
<span class="comment">#   observe({</span>
<span class="comment">#     # Re-execute this reactive expression after 1000 milliseconds</span>
<span class="comment">#     invalidateLater(1000, session)</span>
<span class="comment"># </span>
<span class="comment">#     # Do something each time this is invalidated.</span>
<span class="comment">#     # The isolate() makes this observer _not_ get invalidated and re-executed</span>
<span class="comment">#     # when input$n changes.</span>
<span class="comment">#     print(paste("The value of input$n is", isolate(input$n)))</span>
<span class="comment">#   })</span>
<span class="comment"># </span>
<span class="comment">#   # Generate a new histogram at timed intervals, but not when</span>
<span class="comment">#   # input$n changes.</span>
<span class="comment">#   output$plot &lt;- renderPlot({</span>
<span class="comment">#     # Re-execute this reactive expression after 2000 milliseconds</span>
<span class="comment">#     invalidateLater(2000, session)</span>
<span class="comment">#     hist(isolate(input$n))</span>
<span class="comment">#   })</span>
<span class="comment"># })</span>
<span class="comment">## ---------------------------------------------</span></div></code></pre>
<!-- <ul>
  <li>invalidateLater</li>
</ul>
<ul>
  
</ul> -->

<div data-swiftype-index="false">
<h3>See also</h3>
  <p><code><a href='reactiveTimer.html'>reactiveTimer</a></code> is a slightly less safe alternative.</p>
</div>
```
