---
title: "Reactive polling â€” reactivePoll"
---

```{=html}
<div class="reference">
  

  <pre class="code"><span class='fu'>reactivePoll</span>(<span class='no'>intervalMillis</span>, <span class='no'>session</span>, <span class='no'>checkFunc</span>, <span class='no'>valueFunc</span>)</pre>
  
  <h3 class="hasAnchor" id="arguments"><a class="anchor" href="#arguments"></a>Arguments</h3>
  <table class="arguments">
  <colgroup><col class="name" /><col class="desc" /></colgroup>
  <tr>
    <th><p>intervalMillis</p></th>
    <td><p>Approximate number of milliseconds to wait between
calls to <code>checkFunc</code>. This can be either a numeric value, or a
function that returns a numeric value.</p></td>
  </tr>
  <tr>
    <th><p>session</p></th>
    <td><p>The user session to associate this file reader with, or
<code>NULL</code> if none. If non-null, the reader will automatically stop when
the session ends.</p></td>
  </tr>
  <tr>
    <th><p>checkFunc</p></th>
    <td><p>A relatively cheap function whose values over time will be
tested for equality; inequality indicates that the underlying value has
changed and needs to be invalidated and re-read using <code>valueFunc</code>. See
Details.</p></td>
  </tr>
  <tr>
    <th><p>valueFunc</p></th>
    <td><p>A function that calculates the underlying value. See
Details.</p></td>
  </tr>
  </table>
  <div data-section="description">
  <h3>Description</h3>
  
  <p>Used to create a reactive data source, which works by periodically polling a
non-reactive data source.</p>
  
  </div>


  <div data-section="details">
  <h3 class="hasAnchor" id="value"><a class="anchor" href="#value"></a>Value</h3>

  <p>A reactive expression that returns the result of <code>valueFunc</code>,
and invalidates when <code>checkFunc</code> changes.</p>
    <h3 class="hasAnchor" id="details"><a class="anchor" href="#details"></a>Details</h3>

  <p><code>reactivePoll</code> works by pairing a relatively cheap "check" function with
a more expensive value retrieval function. The check function will be
executed periodically and should always return a consistent value until the
data changes. When the check function returns a different value, then the
value retrieval function will be used to re-populate the data.</p>
<p>Note that the check function doesn't return <code>TRUE</code> or <code>FALSE</code> to
indicate whether the underlying data has changed. Rather, the check function
indicates change by returning a different value from the previous time it was
called.</p>
<p>For example, <code>reactivePoll</code> is used to implement
<code>reactiveFileReader</code> by pairing a check function that simply returns the
last modified timestamp of a file, and a value retrieval function that
actually reads the contents of the file.</p>
<p>As another example, one might read a relational database table reactively by
using a check function that does <code>SELECT MAX(timestamp) FROM table</code> and
a value retrieval function that does <code>SELECT * FROM table</code>.</p>
<p>The <code>intervalMillis</code>, <code>checkFunc</code>, and <code>valueFunc</code> functions
will be executed in a reactive context; therefore, they may read reactive
values and reactive expressions.</p>
    <h3 class="hasAnchor" id="see-also"><a class="anchor" href="#see-also"></a>See also</h3>

  <div class='dont-index'><p><code><a href='reactiveFileReader.html'>reactiveFileReader()</a></code></p></div>
  
  </div>

  <h3 class="hasAnchor" id="examples"><a class="anchor" href="#examples"></a>Examples</h3>
  <pre class="examples"><span class='kw'>function</span>(<span class='no'>input</span>, <span class='no'>output</span>, <span class='no'>session</span>) {

  <span class='no'>data</span> <span class='kw'>&lt;-</span> <span class='fu'>reactivePoll</span>(<span class='fl'>1000</span>, <span class='no'>session</span>,
    <span class='co'># This function returns the time that log_file was last modified</span>
    <span class='kw'>checkFunc</span> <span class='kw'>=</span> <span class='kw'>function</span>() {
      <span class='kw'>if</span> (<span class='fu'><a href='https://rdrr.io/r/base/files.html'>file.exists</a></span>(<span class='no'>log_file</span>))
        <span class='fu'><a href='https://rdrr.io/r/base/file.info.html'>file.info</a></span>(<span class='no'>log_file</span>)$<span class='no'>mtime</span>[<span class='fl'>1</span>]
      <span class='kw'>else</span>
        <span class='st'>""</span>
    },
    <span class='co'># This function returns the content of log_file</span>
    <span class='kw'>valueFunc</span> <span class='kw'>=</span> <span class='kw'>function</span>() {
      <span class='fu'><a href='https://rdrr.io/r/utils/read.table.html'>read.csv</a></span>(<span class='no'>log_file</span>)
    }
  )

  <span class='no'>output</span>$<span class='no'>dataTable</span> <span class='kw'>&lt;-</span> <span class='fu'><a href='renderTable.html'>renderTable</a></span>({
    <span class='fu'><a href='https://rdrr.io/r/utils/data.html'>data</a></span>()
  })
}</pre>
</div>


```
