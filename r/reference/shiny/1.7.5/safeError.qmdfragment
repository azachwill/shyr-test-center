---
title: "Declare an error safe for the user to see â€” safeError"
---

```{=html}
<div class="reference">
  <small class="dont-index pkg-version">v1.7.5</small><small class="dont-index pipe">|</small><small class="dont-index github-source">Source: <a href="https://github.com/rstudio/shiny/blob/v1.7.5/R/utils.R" class="external-link"><code>R/utils.R</code></a></small>

  <div data-section="description"><h3>Description</h3><p>This should be used when you want to let the user see an error
message even if the default is to sanitize all errors. If you have an
error <code>e</code> and call <code>stop(safeError(e))</code>, then Shiny will
ignore the value of <code>getOption("shiny.sanitize.errors")</code> and always
display the error in the app itself.</p></div>

  <div data-section="usage"><div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">safeError</span>(error)</span></code></pre></div></div>

  <div data-section="arguments">
    <h3 id="arguments">Arguments</h3>
    <dl><dt>error</dt>
<dd><p>Either an "error" object or a "character" object (string).
In the latter case, the string will become the message of the error
returned by <code>safeError</code>.</p></dd>

</dl></div>
  <div data-section="value">
    <h3 id="value">Value</h3>
    

<p>An "error" object</p>
  </div>
  <div data-section="details">
    <h3 id="details">Details</h3>
    <p>An error generated by <code>safeError</code> has priority over all
other Shiny errors. This can be dangerous. For example, if you have set
<code>options(shiny.sanitize.errors = TRUE)</code>, then by default all error
messages are omitted in the app, and replaced by a generic error message.
However, this does not apply to <code>safeError</code>: whatever you pass
through <code>error</code> will be displayed to the user. So, this should only
be used when you are sure that your error message does not contain any
sensitive information. In those situations, <code>safeError</code> can make
your users' lives much easier by giving them a hint as to where the
error occurred.</p>
  </div>
  <div data-section="see-also">
    <h3 id="see-also">See also</h3>
    <div class="dont-index"><p><code><a href="shinyOptions.html">shiny-options()</a></code></p></div>
  </div>

  <div data-section="examples">
    <h3 id="examples">Examples</h3>
    <div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="do">## Only run examples in interactive R sessions</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a><span class="cf">if</span> (<span class="fu">interactive</span>()) {</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a><span class="co"># uncomment the desired line to experiment with shiny.sanitize.errors</span></span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a><span class="co"># options(shiny.sanitize.errors = TRUE)</span></span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a><span class="co"># options(shiny.sanitize.errors = FALSE)</span></span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a><span class="co"># Define UI</span></span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a>ui <span class="ot">&lt;-</span> <span class="fu">fluidPage</span>(</span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a>  <span class="fu">textInput</span>(<span class="st">'number'</span>, <span class="st">'Enter your favorite number from 1 to 10'</span>, <span class="st">'5'</span>),</span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a>  <span class="fu">textOutput</span>(<span class="st">'normalError'</span>),</span>
<span id="cb1-12"><a href="#cb1-12" tabindex="-1"></a>  <span class="fu">textOutput</span>(<span class="st">'safeError'</span>)</span>
<span id="cb1-13"><a href="#cb1-13" tabindex="-1"></a>)</span>
<span id="cb1-14"><a href="#cb1-14" tabindex="-1"></a></span>
<span id="cb1-15"><a href="#cb1-15" tabindex="-1"></a><span class="co"># Server logic</span></span>
<span id="cb1-16"><a href="#cb1-16" tabindex="-1"></a>server <span class="ot">&lt;-</span> <span class="cf">function</span>(input, output) {</span>
<span id="cb1-17"><a href="#cb1-17" tabindex="-1"></a>  output<span class="sc">$</span>normalError <span class="ot">&lt;-</span> <span class="fu">renderText</span>({</span>
<span id="cb1-18"><a href="#cb1-18" tabindex="-1"></a>    number <span class="ot">&lt;-</span> input<span class="sc">$</span>number</span>
<span id="cb1-19"><a href="#cb1-19" tabindex="-1"></a>    <span class="cf">if</span> (number <span class="sc">%in%</span> <span class="dv">1</span><span class="sc">:</span><span class="dv">10</span>) {</span>
<span id="cb1-20"><a href="#cb1-20" tabindex="-1"></a>      <span class="fu">return</span>(<span class="fu">paste</span>(<span class="st">'You chose'</span>, number, <span class="st">'!'</span>))</span>
<span id="cb1-21"><a href="#cb1-21" tabindex="-1"></a>    } <span class="cf">else</span> {</span>
<span id="cb1-22"><a href="#cb1-22" tabindex="-1"></a>      <span class="fu">stop</span>(</span>
<span id="cb1-23"><a href="#cb1-23" tabindex="-1"></a>        <span class="fu">paste</span>(number, <span class="st">'is not a number between 1 and 10'</span>)</span>
<span id="cb1-24"><a href="#cb1-24" tabindex="-1"></a>      )</span>
<span id="cb1-25"><a href="#cb1-25" tabindex="-1"></a>    }</span>
<span id="cb1-26"><a href="#cb1-26" tabindex="-1"></a>  })</span>
<span id="cb1-27"><a href="#cb1-27" tabindex="-1"></a>  output<span class="sc">$</span>safeError <span class="ot">&lt;-</span> <span class="fu">renderText</span>({</span>
<span id="cb1-28"><a href="#cb1-28" tabindex="-1"></a>    number <span class="ot">&lt;-</span> input<span class="sc">$</span>number</span>
<span id="cb1-29"><a href="#cb1-29" tabindex="-1"></a>    <span class="cf">if</span> (number <span class="sc">%in%</span> <span class="dv">1</span><span class="sc">:</span><span class="dv">10</span>) {</span>
<span id="cb1-30"><a href="#cb1-30" tabindex="-1"></a>      <span class="fu">return</span>(<span class="fu">paste</span>(<span class="st">'You chose'</span>, number, <span class="st">'!'</span>))</span>
<span id="cb1-31"><a href="#cb1-31" tabindex="-1"></a>    } <span class="cf">else</span> {</span>
<span id="cb1-32"><a href="#cb1-32" tabindex="-1"></a>      <span class="fu">stop</span>(<span class="fu">safeError</span>(</span>
<span id="cb1-33"><a href="#cb1-33" tabindex="-1"></a>        <span class="fu">paste</span>(number, <span class="st">'is not a number between 1 and 10'</span>)</span>
<span id="cb1-34"><a href="#cb1-34" tabindex="-1"></a>      ))</span>
<span id="cb1-35"><a href="#cb1-35" tabindex="-1"></a>    }</span>
<span id="cb1-36"><a href="#cb1-36" tabindex="-1"></a>  })</span>
<span id="cb1-37"><a href="#cb1-37" tabindex="-1"></a>}</span>
<span id="cb1-38"><a href="#cb1-38" tabindex="-1"></a></span>
<span id="cb1-39"><a href="#cb1-39" tabindex="-1"></a><span class="co"># Complete app with UI and server components</span></span>
<span id="cb1-40"><a href="#cb1-40" tabindex="-1"></a><span class="fu">shinyApp</span>(ui, server)</span>
<span id="cb1-41"><a href="#cb1-41" tabindex="-1"></a>}</span></code></pre></div>
  </div>
</div>
```
