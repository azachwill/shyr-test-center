---
title: "Add caching with reactivity to an object â€” bindCache"
---

```{=html}
<div class="reference">
  <small class="dont-index pkg-version">v1.9.0</small><small class="dont-index pipe">|</small><small class="dont-index github-source">Source: <a href="https://github.com/rstudio/shiny/blob/v1.9.0/R/bind-cache.R" class="external-link"><code>R/bind-cache.R</code></a></small>

  <div data-section="description"><h3>Description</h3><p><code>bindCache()</code> adds caching <code><a href="reactive.html">reactive()</a></code> expressions and <code>render*</code> functions
(like <code><a href="renderPrint.html">renderText()</a></code>, <code><a href="renderTable.html">renderTable()</a></code>, ...).</p>
<p>Ordinary <code><a href="reactive.html">reactive()</a></code> expressions automatically cache their <em>most recent</em>
value, which helps to  avoid redundant computation in downstream reactives.
<code>bindCache()</code> will cache all previous values (as long as they fit in the
cache) and they can be shared across user sessions. This allows
<code>bindCache()</code> to dramatically improve performance when used correctly.</p></div>

  <div data-section="usage"><div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">bindCache</span>(x, ..., <span class="at">cache =</span> <span class="st">"app"</span>)</span></code></pre></div></div>

  <div data-section="arguments">
    <h3 id="arguments">Arguments</h3>
    <dl><dt>x</dt>
<dd><p>The object to add caching to.</p></dd>


<dt>...</dt>
<dd><p>One or more expressions to use in the caching key.</p></dd>


<dt>cache</dt>
<dd><p>The scope of the cache, or a cache object. This can be <code>"app"</code>
(the default), <code>"session"</code>, or a cache object like a
<code><a href="https://cachem.r-lib.org/reference/cache_disk.html" class="external-link">cachem::cache_disk()</a></code>. See the Cache Scoping section for more information.</p></dd>

</dl></div>
  <div data-section="details">
    <h3 id="details">Details</h3>
    <p><code>bindCache()</code> requires one or more expressions that are used to generate a
<strong>cache key</strong>, which is used to determine if a computation has occurred
before and hence can be retrieved from the cache. If you're familiar with the
concept of memoizing pure functions (e.g., the <span class="pkg">memoise</span> package), you
can think of the cache key as the input(s) to a pure function. As such, one
should take care to make sure the use of <code>bindCache()</code> is <em>pure</em> in the same
sense, namely:</p><ol><li><p>For a given key, the return value is always the same.</p></li>
<li><p>Evaluation has no side-effects.</p></li>
</ol><p>In the example here, the <code>bindCache()</code> key consists of <code>input$x</code> and
<code>input$y</code> combined, and the value is <code>input$x * input$y</code>. In this simple
example, for any given key, there is only one possible returned value.</p>
<p></p><div class="sourceCode"><pre><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a>r <span class="ot">&lt;-</span> <span class="fu">reactive</span>({ input<span class="sc">$</span>x <span class="sc">*</span> input<span class="sc">$</span>y }) <span class="sc">%&gt;%</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>  <span class="fu">bindCache</span>(input<span class="sc">$</span>x, input<span class="sc">$</span>y)</span></code></pre><p></p></div>
<p>The largest performance improvements occur when the cache key is fast to
compute and the reactive expression is slow to compute. To see if the value
should be computed, a cached reactive evaluates the key, and then serializes
and hashes the result. If the resulting hashed key is in the cache, then the
cached reactive simply retrieves the previously calculated value and returns
it; if not, then the value is computed and the result is stored in the cache
before being returned.</p>
<p>To compute the cache key, <code>bindCache()</code> hashes the contents of <code>...</code>, so it's
best to avoid including large objects in a cache key since that can result in
slow hashing. It's also best to avoid reference objects like environments and
R6 objects, since the serialization of these objects may not capture relevant
changes.</p>
<p>If you want to use a large object as part of a cache key, it may make sense
to do some sort of reduction on the data that still captures information
about whether a value can be retrieved from the cache. For example, if you
have a large data set with timestamps, it might make sense to extract the
most recent timestamp and return that. Then, instead of hashing the entire
data object, the cached reactive only needs to hash the timestamp.</p>
<p></p><div class="sourceCode"><pre><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a>r <span class="ot">&lt;-</span> <span class="fu">reactive</span>({ <span class="fu">compute</span>(<span class="fu">bigdata</span>()) } <span class="sc">%&gt;%</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>  <span class="fu">bindCache</span>({ <span class="fu">extract_most_recent_time</span>(<span class="fu">bigdata</span>()) })</span></code></pre><p></p></div>
<p>For computations that are very slow, it often makes sense to pair
<code>bindCache()</code> with <code><a href="bindEvent.html">bindEvent()</a></code> so that no computation is performed until
the user explicitly requests it (for more, see the Details section of
<code><a href="bindEvent.html">bindEvent()</a></code>).</p>
  </div>
  <div data-section="cache-keys-and-reactivity">
    <h3 id="cache-keys-and-reactivity">Cache keys and reactivity</h3>
    


<p>Because the <strong>value</strong> expression (from the original <code><a href="reactive.html">reactive()</a></code>) is
cached, it is not necessarily re-executed when someone retrieves a value,
and therefore it can't be used to decide what objects to take reactive
dependencies on. Instead, the <strong>key</strong> is used to figure out which objects
to take reactive dependencies on. In short, the key expression is reactive,
and value expression is no longer reactive.</p>
<p>Here's an example of what not to do: if the key is <code>input$x</code> and the value
expression is from <code>reactive({input$x + input$y})</code>, then the resulting
cached reactive  will only take a reactive dependency on <code>input$x</code> -- it
won't recompute <code>{input$x + input$y}</code> when just <code>input$y</code> changes.
Moreover, the cache won't use <code>input$y</code> as part of the key, and so it could
return incorrect values in the future when it retrieves values from the
cache. (See the examples below for an example of this.)</p>
<p>A better cache key would be something like <code>input$x, input$y</code>. This does
two things: it ensures that a reactive dependency is taken on both
<code>input$x</code> and <code>input$y</code>, and it also makes sure that both values are
represented in the cache key.</p>
<p>In general, <code>key</code> should use the same reactive inputs as <code>value</code>, but the
computation should be simpler. If there are other (non-reactive) values
that are consumed, such as external data sources, they should be used in
the <code>key</code> as well. Note that if the <code>key</code> is large, it can make sense to do
some sort of reduction on it so that the serialization and hashing of the
cache key is not too expensive.</p>
<p>Remember that the key is <em>reactive</em>, so it is not re-executed every single
time that someone accesses the cached reactive. It is only re-executed if
it has been invalidated by one of the reactives it depends on. For
example, suppose we have this cached reactive:</p>
<p></p><div class="sourceCode"><pre><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a>r <span class="ot">&lt;-</span> <span class="fu">reactive</span>({ input<span class="sc">$</span>x <span class="sc">*</span> input<span class="sc">$</span>y }) <span class="sc">%&gt;%</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a> <span class="fu">bindCache</span>(input<span class="sc">$</span>x, input<span class="sc">$</span>y)</span></code></pre><p></p></div>
<p>In this case, the key expression is essentially <code>reactive(list(input$x, input$y))</code> (there's a bit more to it, but that's a good enough
approximation). The first time <code>r()</code> is called, it executes the key, then
fails to find it in the cache, so it executes the value expression, <code>{ input$x + input$y }</code>. If <code>r()</code> is called again, then it does not need to
re-execute the key expression, because it has not been invalidated via a
change to <code>input$x</code> or <code>input$y</code>; it simply returns the previous value.
However, if <code>input$x</code> or <code>input$y</code> changes, then the reactive expression will
be invalidated, and the next time that someone calls <code>r()</code>, the key
expression will need to be re-executed.</p>
<p>Note that if the cached reactive is passed to <code><a href="bindEvent.html">bindEvent()</a></code>, then the key
expression will no longer be reactive; instead, the event expression will be
reactive.</p>
  </div>
  <div data-section="cache-scope">
    <h3 id="cache-scope">Cache scope</h3>
    


<p>By default, when <code>bindCache()</code> is used, it is scoped to the running
application. That means that it shares a cache with all user sessions
connected to the application (within the R process). This is done with the
<code>cache</code> parameter's default value, <code>"app"</code>.</p>
<p>With an app-level cache scope, one user can benefit from the work done for
another user's session. In most cases, this is the best way to get
performance improvements from caching. However, in some cases, this could
leak information between sessions. For example, if the cache key does not
fully encompass the inputs used by the value, then data could leak between
the sessions. Or if a user sees that a cached reactive returns its value
very quickly, they may be able to infer that someone else has already used
it with the same values.</p>
<p>It is also possible to scope the cache to the session, with
<code>cache="session"</code>. This removes the risk of information leaking between
sessions, but then one session cannot benefit from computations performed in
another session.</p>
<p>It is possible to pass in caching objects directly to
<code>bindCache()</code>. This can be useful if, for example, you want to use a
particular type of cache with specific cached reactives, or if you want to
use a <code><a href="https://cachem.r-lib.org/reference/cache_disk.html" class="external-link">cachem::cache_disk()</a></code> that is shared across multiple processes and
persists beyond the current R session.</p>
<p>To use different settings for an application-scoped cache, you can call
<code><a href="shinyOptions.html">shinyOptions()</a></code> at the top of your app.R, server.R, or
global.R. For example, this will create a cache with 500 MB of space
instead of the default 200 MB:</p>
<p></p><div class="sourceCode"><pre><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">shinyOptions</span>(<span class="at">cache =</span> cachem<span class="sc">::</span><span class="fu">cache_mem</span>(<span class="at">max_size =</span> <span class="fl">500e6</span>))</span></code></pre><p></p></div>
<p>To use different settings for a session-scoped cache, you can set
<code>session$cache</code> at the top of your server function. By default, it will
create a 200 MB memory cache for each session, but you can replace it with
something different. To use the session-scoped cache, you must also call
<code>bindCache()</code> with <code>cache="session"</code>. This will create a 100 MB cache for
the session:</p>
<p></p><div class="sourceCode"><pre><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>  session<span class="sc">$</span>cache <span class="ot">&lt;-</span> cachem<span class="sc">::</span><span class="fu">cache_mem</span>(<span class="at">max_size =</span> <span class="fl">100e6</span>)</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a>  ...</span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>}</span></code></pre><p></p></div>
<p>If you want to use a cache that is shared across multiple R processes, you
can use a <code><a href="https://cachem.r-lib.org/reference/cache_disk.html" class="external-link">cachem::cache_disk()</a></code>. You can create a application-level shared
cache by putting this at the top of your app.R, server.R, or global.R:</p>
<p></p><div class="sourceCode"><pre><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">shinyOptions</span>(<span class="at">cache =</span> cachem<span class="sc">::</span><span class="fu">cache_disk</span>(<span class="fu">file.path</span>(<span class="fu">dirname</span>(<span class="fu">tempdir</span>()), <span class="st">"myapp-cache"</span>))</span></code></pre><p></p></div>
<p>This will create a subdirectory in your system temp directory named
<code>myapp-cache</code> (replace <code>myapp-cache</code> with a unique name of
your choosing). On most platforms, this directory will be removed when
your system reboots. This cache will persist across multiple starts and
stops of the R process, as long as you do not reboot.</p>
<p>To have the cache persist even across multiple reboots, you can create the
cache in a location outside of the temp directory. For example, it could
be a subdirectory of the application:</p>
<p></p><div class="sourceCode"><pre><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">shinyOptions</span>(<span class="at">cache =</span> cachem<span class="sc">::</span><span class="fu">cache_disk</span>(<span class="st">"./myapp-cache"</span>))</span></code></pre><p></p></div>
<p>In this case, resetting the cache will have to be done manually, by deleting
the directory.</p>
<p>You can also scope a cache to just one item, or selected items. To do that,
create a <code><a href="https://cachem.r-lib.org/reference/cache_mem.html" class="external-link">cachem::cache_mem()</a></code> or <code><a href="https://cachem.r-lib.org/reference/cache_disk.html" class="external-link">cachem::cache_disk()</a></code>, and pass it
as the <code>cache</code> argument of <code>bindCache()</code>.</p>
  </div>
  <div data-section="computing-cache-keys">
    <h3 id="computing-cache-keys">Computing cache keys</h3>
    


<p>The actual cache key that is used internally takes value from evaluating
the key expression(s) (from the <code>...</code> arguments) and combines it with the
(unevaluated) value expression.</p>
<p>This means that if there are two cached reactives which have the same
result from evaluating the key, but different value expressions, then they
will not need to worry about collisions.</p>
<p>However, if two cached reactives have identical key and value expressions
expressions, they will share the cached values. This is useful when using
<code>cache="app"</code>: there may be multiple user sessions which create separate
cached reactive objects (because they are created from the same code in the
server function, but the server function is executed once for each user
session), and those cached reactive objects across sessions can share
values in the cache.</p>
  </div>
  <div data-section="async-with-cached-reactives">
    <h3 id="async-with-cached-reactives">Async with cached reactives</h3>
    


<p>With a cached reactive expression, the key and/or value expression can be
<em>asynchronous</em>. In other words, they can be promises --- not regular R
promises, but rather objects provided by the
<a href="https://rstudio.github.io/promises/" class="external-link"><span class="pkg">promises</span></a>  package, which
are similar to promises in JavaScript. (See <code><a href="https://rstudio.github.io/promises/reference/promise.html" class="external-link">promises::promise()</a></code> for more
information.) You can also use <code><a href="https://future.futureverse.org/reference/future.html" class="external-link">future::future()</a></code> objects to run code in a
separate process or even on a remote machine.</p>
<p>If the value returns a promise, then anything that consumes the cached
reactive must expect it to return a promise.</p>
<p>Similarly, if the key is a promise (in other words, if it is asynchronous),
then the entire cached reactive must be asynchronous, since the key must be
computed asynchronously before it knows whether to compute the value or the
value is retrieved from the cache. Anything that consumes the cached
reactive must therefore expect it to return a promise.</p>
  </div>
  <div data-section="developing-render-functions-for-caching">
    <h3 id="developing-render-functions-for-caching">Developing render functions for caching</h3>
    


<p>If you've implemented your own <code>render*()</code> function, it may just work with
<code>bindCache()</code>, but it is possible that you will need to make some
modifications. These modifications involve helping <code>bindCache()</code> avoid
cache collisions, dealing with internal state that may be set by the,
<code>render</code> function, and modifying the data as it goes in and comes out of
the cache.</p>
<p>You may need to provide a <code>cacheHint</code> to <code><a href="createRenderFunction.html">createRenderFunction()</a></code> (or
<code><a href="https://rdrr.io/pkg/htmlwidgets/man/htmlwidgets-shiny.html" class="external-link">htmlwidgets::shinyRenderWidget()</a></code>, if you've authored an htmlwidget) in
order for <code>bindCache()</code> to correctly compute a cache key.</p>
<p>The potential problem is a cache collision. Consider the following:</p>
<p></p><div class="sourceCode"><pre><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a>output<span class="sc">$</span>x1 <span class="ot">&lt;-</span> <span class="fu">renderText</span>({ input<span class="sc">$</span>x }) <span class="sc">%&gt;%</span> <span class="fu">bindCache</span>(input<span class="sc">$</span>x)</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>output<span class="sc">$</span>x2 <span class="ot">&lt;-</span> <span class="fu">renderText</span>({ input<span class="sc">$</span>x <span class="sc">*</span> <span class="dv">2</span> }) <span class="sc">%&gt;%</span> <span class="fu">bindCache</span>(input<span class="sc">$</span>x)</span></code></pre><p></p></div>
<p>Both <code>output$x1</code> and <code>output$x2</code> use <code>input$x</code> as part of their cache key,
but if it were the only thing used in the cache key, then the two outputs
would have a cache collision, and they would have the same output. To avoid
this, a <em>cache hint</em> is automatically added when <code><a href="renderPrint.html">renderText()</a></code> calls
<code><a href="createRenderFunction.html">createRenderFunction()</a></code>. The cache hint is used as part of the actual
cache key, in addition to the one passed to <code>bindCache()</code> by the user. The
cache hint can be viewed by calling the internal Shiny function
<code>extractCacheHint()</code>:</p>
<p></p><div class="sourceCode"><pre><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a>r <span class="ot">&lt;-</span> <span class="fu">renderText</span>({ input<span class="sc">$</span>x })</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>shiny<span class="sc">:::</span><span class="fu">extractCacheHint</span>(r)</span></code></pre><p></p></div>
<p>This returns a nested list containing an item, <code>$origUserFunc$body</code>, which
in this case is the expression which was passed to <code><a href="renderPrint.html">renderText()</a></code>:
<code>{ input$x }</code>. This (quoted)  expression is mixed into the actual cache
key, and it is how <code>output$x1</code> does not have collisions with <code>output$x2</code>.</p>
<p>For most developers of render functions, nothing extra needs to be done;
the automatic inference of the cache hint is sufficient. Again, you can
check it by calling <code>shiny:::extractCacheHint()</code>, and by testing the
render function for cache collisions in a real application.</p>
<p>In some cases, however, the automatic cache hint inference is not
sufficient, and it is necessary to provide a cache hint. This is true
for <code><a href="renderPrint.html">renderPrint()</a></code>. Unlike <code><a href="renderPrint.html">renderText()</a></code>, it wraps the user-provided
expression in another function, before passing it to <code><a href="createRenderFunction.html">createRenderFunction()</a></code>
(instead of <code><a href="createRenderFunction.html">createRenderFunction()</a></code>). Because the user code is wrapped in
another function, <code><a href="createRenderFunction.html">createRenderFunction()</a></code> is not able to automatically
extract the user-provided code and use it in the cache key. Instead,
<code>renderPrint</code> calls <code><a href="createRenderFunction.html">createRenderFunction()</a></code>, it explicitly passes along a
<code>cacheHint</code>, which includes a label and the original user expression.</p>
<p>In general, if you need to provide a <code>cacheHint</code>, it is best practice to
provide a <code>label</code> id, the user's <code>expr</code>, as well as any other arguments
that may influence the final value.</p>
<p>For <span class="pkg">htmlwidgets</span>, it will try to automatically infer a cache hint;
again, you can inspect the cache hint with <code>shiny:::extractCacheHint()</code> and
also test it in an application. If you do need to explicitly provide a
cache hint, pass it to <code>shinyRenderWidget</code>. For example:</p>
<p></p><div class="sourceCode"><pre><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a>renderMyWidget <span class="ot">&lt;-</span> <span class="cf">function</span>(expr) {</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>  q <span class="ot">&lt;-</span> rlang<span class="sc">::</span><span class="fu">enquo0</span>(expr)</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>  htmlwidgets<span class="sc">::</span><span class="fu">shinyRenderWidget</span>(</span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>    q,</span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a>    myWidgetOutput,</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a>    <span class="at">quoted =</span> <span class="cn">TRUE</span>,</span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a>    <span class="at">cacheHint =</span> <span class="fu">list</span>(<span class="at">label =</span> <span class="st">"myWidget"</span>, <span class="at">userQuo =</span> q)</span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a>  )</span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a>}</span></code></pre><p></p></div>
<p>If your <code>render</code> function sets any internal state, you may find it useful
in your call to <code><a href="createRenderFunction.html">createRenderFunction()</a></code> to use
the <code>cacheWriteHook</code> and/or <code>cacheReadHook</code> parameters. These hooks are
functions that run just before the object is stored in the cache, and just
after the object is retrieved from the cache. They can modify the data
that is stored and retrieved; this can be useful if extra information needs
to be stored in the cache. They can also be used to modify the state of the
application; for example, it can call <code><a href="createWebDependency.html">createWebDependency()</a></code> to make
JS/CSS resources available if the cached object is loaded in a different R
process. (See the source of <code><a href="https://rdrr.io/pkg/htmlwidgets/man/htmlwidgets-shiny.html" class="external-link">htmlwidgets::shinyRenderWidget</a></code> for an example
of this.)</p>
  </div>
  <div data-section="uncacheable-objects">
    <h3 id="uncacheable-objects">Uncacheable objects</h3>
    


<p>Some render functions cannot be cached, typically because they have side
effects or modify some external state, and they must re-execute each time
in order to work properly.</p>
<p>For developers of such code, they should call <code><a href="createRenderFunction.html">createRenderFunction()</a></code> (or
<code><a href="markRenderFunction.html">markRenderFunction()</a></code>) with <code>cacheHint = FALSE</code>.</p>
  </div>
  <div data-section="caching-with-renderplot-">
    <h3 id="caching-with-renderplot-">Caching with <code><a href="renderPlot.html">renderPlot()</a></code></h3>
    


<p>When <code>bindCache()</code> is used with <code><a href="renderPlot.html">renderPlot()</a></code>, the <code>height</code> and <code>width</code>
passed to the original <code><a href="renderPlot.html">renderPlot()</a></code> are ignored. They are superseded by
<code>sizePolicy</code> argument passed to `bindCache. The default is:</p>
<p></p><div class="sourceCode"><pre><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a>sizePolicy <span class="ot">=</span> <span class="fu">sizeGrowthRatio</span>(<span class="at">width =</span> <span class="dv">400</span>, <span class="at">height =</span> <span class="dv">400</span>, <span class="at">growthRate =</span> <span class="fl">1.2</span>)</span></code></pre><p></p></div>
<p><code>sizePolicy</code> must be a function that takes a two-element numeric vector as
input, representing the width and height of the <code>&lt;img&gt;</code> element in the
browser window, and it must return a two-element numeric vector, representing
the pixel dimensions of the plot to generate. The purpose is to round the
actual pixel dimensions from the browser to some other dimensions, so that
this will not generate and cache images of every possible pixel dimension.
See <code><a href="sizeGrowthRatio.html">sizeGrowthRatio()</a></code> for more information on the default sizing policy.</p>
  </div>
  <div data-section="see-also">
    <h3 id="see-also">See also</h3>
    <div class="dont-index"><p><code><a href="bindEvent.html">bindEvent()</a></code>, <code><a href="renderCachedPlot.html">renderCachedPlot()</a></code> for caching plots.</p></div>
  </div>

  <div data-section="examples">
    <h3 id="examples">Examples</h3>
    <div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="cf">if</span> (<span class="cn">FALSE</span>) {</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>rc <span class="ot">&lt;-</span> <span class="fu">bindCache</span>(</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a>  <span class="at">x =</span> <span class="fu">reactive</span>({</span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>    <span class="fu">Sys.sleep</span>(<span class="dv">2</span>)   <span class="co"># Pretend this is expensive</span></span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>    input<span class="sc">$</span>x <span class="sc">*</span> <span class="dv">100</span></span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a>  }),</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a>  input<span class="sc">$</span>x</span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a>)</span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a><span class="co"># Can make it prettier with the %&gt;% operator</span></span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a><span class="fu">library</span>(magrittr)</span>
<span id="cb1-12"><a href="#cb1-12" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" tabindex="-1"></a>rc <span class="ot">&lt;-</span> <span class="fu">reactive</span>({</span>
<span id="cb1-14"><a href="#cb1-14" tabindex="-1"></a>  <span class="fu">Sys.sleep</span>(<span class="dv">2</span>)</span>
<span id="cb1-15"><a href="#cb1-15" tabindex="-1"></a>  input<span class="sc">$</span>x <span class="sc">*</span> <span class="dv">100</span></span>
<span id="cb1-16"><a href="#cb1-16" tabindex="-1"></a>}) <span class="sc">%&gt;%</span></span>
<span id="cb1-17"><a href="#cb1-17" tabindex="-1"></a>  <span class="fu">bindCache</span>(input<span class="sc">$</span>x)</span>
<span id="cb1-18"><a href="#cb1-18" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" tabindex="-1"></a>}</span>
<span id="cb1-20"><a href="#cb1-20" tabindex="-1"></a></span>
<span id="cb1-21"><a href="#cb1-21" tabindex="-1"></a><span class="do">## Only run app examples in interactive R sessions</span></span>
<span id="cb1-22"><a href="#cb1-22" tabindex="-1"></a><span class="cf">if</span> (<span class="fu">interactive</span>()) {</span>
<span id="cb1-23"><a href="#cb1-23" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" tabindex="-1"></a><span class="co"># Basic example</span></span>
<span id="cb1-25"><a href="#cb1-25" tabindex="-1"></a><span class="fu">shinyApp</span>(</span>
<span id="cb1-26"><a href="#cb1-26" tabindex="-1"></a>  <span class="at">ui =</span> <span class="fu">fluidPage</span>(</span>
<span id="cb1-27"><a href="#cb1-27" tabindex="-1"></a>    <span class="fu">sliderInput</span>(<span class="st">"x"</span>, <span class="st">"x"</span>, <span class="dv">1</span>, <span class="dv">10</span>, <span class="dv">5</span>),</span>
<span id="cb1-28"><a href="#cb1-28" tabindex="-1"></a>    <span class="fu">sliderInput</span>(<span class="st">"y"</span>, <span class="st">"y"</span>, <span class="dv">1</span>, <span class="dv">10</span>, <span class="dv">5</span>),</span>
<span id="cb1-29"><a href="#cb1-29" tabindex="-1"></a>    <span class="fu">div</span>(<span class="st">"x * y: "</span>),</span>
<span id="cb1-30"><a href="#cb1-30" tabindex="-1"></a>    <span class="fu">verbatimTextOutput</span>(<span class="st">"txt"</span>)</span>
<span id="cb1-31"><a href="#cb1-31" tabindex="-1"></a>  ),</span>
<span id="cb1-32"><a href="#cb1-32" tabindex="-1"></a>  <span class="at">server =</span> <span class="cf">function</span>(input, output) {</span>
<span id="cb1-33"><a href="#cb1-33" tabindex="-1"></a>    r <span class="ot">&lt;-</span> <span class="fu">reactive</span>({</span>
<span id="cb1-34"><a href="#cb1-34" tabindex="-1"></a>      <span class="co"># The value expression is an _expensive_ computation</span></span>
<span id="cb1-35"><a href="#cb1-35" tabindex="-1"></a>      <span class="fu">message</span>(<span class="st">"Doing expensive computation..."</span>)</span>
<span id="cb1-36"><a href="#cb1-36" tabindex="-1"></a>      <span class="fu">Sys.sleep</span>(<span class="dv">2</span>)</span>
<span id="cb1-37"><a href="#cb1-37" tabindex="-1"></a>      input<span class="sc">$</span>x <span class="sc">*</span> input<span class="sc">$</span>y</span>
<span id="cb1-38"><a href="#cb1-38" tabindex="-1"></a>    }) <span class="sc">%&gt;%</span></span>
<span id="cb1-39"><a href="#cb1-39" tabindex="-1"></a>      <span class="fu">bindCache</span>(input<span class="sc">$</span>x, input<span class="sc">$</span>y)</span>
<span id="cb1-40"><a href="#cb1-40" tabindex="-1"></a></span>
<span id="cb1-41"><a href="#cb1-41" tabindex="-1"></a>    output<span class="sc">$</span>txt <span class="ot">&lt;-</span> <span class="fu">renderText</span>(<span class="fu">r</span>())</span>
<span id="cb1-42"><a href="#cb1-42" tabindex="-1"></a>  }</span>
<span id="cb1-43"><a href="#cb1-43" tabindex="-1"></a>)</span>
<span id="cb1-44"><a href="#cb1-44" tabindex="-1"></a></span>
<span id="cb1-45"><a href="#cb1-45" tabindex="-1"></a></span>
<span id="cb1-46"><a href="#cb1-46" tabindex="-1"></a><span class="co"># Caching renderText</span></span>
<span id="cb1-47"><a href="#cb1-47" tabindex="-1"></a><span class="fu">shinyApp</span>(</span>
<span id="cb1-48"><a href="#cb1-48" tabindex="-1"></a>  <span class="at">ui =</span> <span class="fu">fluidPage</span>(</span>
<span id="cb1-49"><a href="#cb1-49" tabindex="-1"></a>    <span class="fu">sliderInput</span>(<span class="st">"x"</span>, <span class="st">"x"</span>, <span class="dv">1</span>, <span class="dv">10</span>, <span class="dv">5</span>),</span>
<span id="cb1-50"><a href="#cb1-50" tabindex="-1"></a>    <span class="fu">sliderInput</span>(<span class="st">"y"</span>, <span class="st">"y"</span>, <span class="dv">1</span>, <span class="dv">10</span>, <span class="dv">5</span>),</span>
<span id="cb1-51"><a href="#cb1-51" tabindex="-1"></a>    <span class="fu">div</span>(<span class="st">"x * y: "</span>),</span>
<span id="cb1-52"><a href="#cb1-52" tabindex="-1"></a>    <span class="fu">verbatimTextOutput</span>(<span class="st">"txt"</span>)</span>
<span id="cb1-53"><a href="#cb1-53" tabindex="-1"></a>  ),</span>
<span id="cb1-54"><a href="#cb1-54" tabindex="-1"></a>  <span class="at">server =</span> <span class="cf">function</span>(input, output) {</span>
<span id="cb1-55"><a href="#cb1-55" tabindex="-1"></a>    output<span class="sc">$</span>txt <span class="ot">&lt;-</span> <span class="fu">renderText</span>({</span>
<span id="cb1-56"><a href="#cb1-56" tabindex="-1"></a>      <span class="fu">message</span>(<span class="st">"Doing expensive computation..."</span>)</span>
<span id="cb1-57"><a href="#cb1-57" tabindex="-1"></a>      <span class="fu">Sys.sleep</span>(<span class="dv">2</span>)</span>
<span id="cb1-58"><a href="#cb1-58" tabindex="-1"></a>      input<span class="sc">$</span>x <span class="sc">*</span> input<span class="sc">$</span>y</span>
<span id="cb1-59"><a href="#cb1-59" tabindex="-1"></a>    }) <span class="sc">%&gt;%</span></span>
<span id="cb1-60"><a href="#cb1-60" tabindex="-1"></a>      <span class="fu">bindCache</span>(input<span class="sc">$</span>x, input<span class="sc">$</span>y)</span>
<span id="cb1-61"><a href="#cb1-61" tabindex="-1"></a>  }</span>
<span id="cb1-62"><a href="#cb1-62" tabindex="-1"></a>)</span>
<span id="cb1-63"><a href="#cb1-63" tabindex="-1"></a></span>
<span id="cb1-64"><a href="#cb1-64" tabindex="-1"></a></span>
<span id="cb1-65"><a href="#cb1-65" tabindex="-1"></a><span class="co"># Demo of using events and caching with an actionButton</span></span>
<span id="cb1-66"><a href="#cb1-66" tabindex="-1"></a><span class="fu">shinyApp</span>(</span>
<span id="cb1-67"><a href="#cb1-67" tabindex="-1"></a>  <span class="at">ui =</span> <span class="fu">fluidPage</span>(</span>
<span id="cb1-68"><a href="#cb1-68" tabindex="-1"></a>    <span class="fu">sliderInput</span>(<span class="st">"x"</span>, <span class="st">"x"</span>, <span class="dv">1</span>, <span class="dv">10</span>, <span class="dv">5</span>),</span>
<span id="cb1-69"><a href="#cb1-69" tabindex="-1"></a>    <span class="fu">sliderInput</span>(<span class="st">"y"</span>, <span class="st">"y"</span>, <span class="dv">1</span>, <span class="dv">10</span>, <span class="dv">5</span>),</span>
<span id="cb1-70"><a href="#cb1-70" tabindex="-1"></a>    <span class="fu">actionButton</span>(<span class="st">"go"</span>, <span class="st">"Go"</span>),</span>
<span id="cb1-71"><a href="#cb1-71" tabindex="-1"></a>    <span class="fu">div</span>(<span class="st">"x * y: "</span>),</span>
<span id="cb1-72"><a href="#cb1-72" tabindex="-1"></a>    <span class="fu">verbatimTextOutput</span>(<span class="st">"txt"</span>)</span>
<span id="cb1-73"><a href="#cb1-73" tabindex="-1"></a>  ),</span>
<span id="cb1-74"><a href="#cb1-74" tabindex="-1"></a>  <span class="at">server =</span> <span class="cf">function</span>(input, output) {</span>
<span id="cb1-75"><a href="#cb1-75" tabindex="-1"></a>    r <span class="ot">&lt;-</span> <span class="fu">reactive</span>({</span>
<span id="cb1-76"><a href="#cb1-76" tabindex="-1"></a>      <span class="fu">message</span>(<span class="st">"Doing expensive computation..."</span>)</span>
<span id="cb1-77"><a href="#cb1-77" tabindex="-1"></a>      <span class="fu">Sys.sleep</span>(<span class="dv">2</span>)</span>
<span id="cb1-78"><a href="#cb1-78" tabindex="-1"></a>      input<span class="sc">$</span>x <span class="sc">*</span> input<span class="sc">$</span>y</span>
<span id="cb1-79"><a href="#cb1-79" tabindex="-1"></a>    }) <span class="sc">%&gt;%</span></span>
<span id="cb1-80"><a href="#cb1-80" tabindex="-1"></a>      <span class="fu">bindCache</span>(input<span class="sc">$</span>x, input<span class="sc">$</span>y) <span class="sc">%&gt;%</span></span>
<span id="cb1-81"><a href="#cb1-81" tabindex="-1"></a>      <span class="fu">bindEvent</span>(input<span class="sc">$</span>go)</span>
<span id="cb1-82"><a href="#cb1-82" tabindex="-1"></a>      <span class="co"># The cached, eventified reactive takes a reactive dependency on</span></span>
<span id="cb1-83"><a href="#cb1-83" tabindex="-1"></a>      <span class="co"># input$go, but doesn't use it for the cache key. It uses input$x and</span></span>
<span id="cb1-84"><a href="#cb1-84" tabindex="-1"></a>      <span class="co"># input$y for the cache key, but doesn't take a reactive dependency on</span></span>
<span id="cb1-85"><a href="#cb1-85" tabindex="-1"></a>      <span class="co"># them, because the reactive dependency is superseded by addEvent().</span></span>
<span id="cb1-86"><a href="#cb1-86" tabindex="-1"></a></span>
<span id="cb1-87"><a href="#cb1-87" tabindex="-1"></a>    output<span class="sc">$</span>txt <span class="ot">&lt;-</span> <span class="fu">renderText</span>(<span class="fu">r</span>())</span>
<span id="cb1-88"><a href="#cb1-88" tabindex="-1"></a>  }</span>
<span id="cb1-89"><a href="#cb1-89" tabindex="-1"></a>)</span>
<span id="cb1-90"><a href="#cb1-90" tabindex="-1"></a></span>
<span id="cb1-91"><a href="#cb1-91" tabindex="-1"></a>}</span></code></pre></div>
  </div>
</div>
```
