---
title: "Shiny modules â€” moduleServer"
---

```{=html}
<div class="reference">
  <small class="dont-index pkg-version">v1.9.0</small><small class="dont-index pipe">|</small><small class="dont-index github-source">Source: <a href="https://github.com/rstudio/shiny/blob/v1.9.0/R/modules.R" class="external-link"><code>R/modules.R</code></a></small>

  <div data-section="description"><h3>Description</h3><p>Shiny's module feature lets you break complicated UI and server logic into
smaller, self-contained pieces. Compared to large monolithic Shiny apps,
modules are easier to reuse and easier to reason about. See the article at
<a href="https://shiny.rstudio.com/articles/modules.html" class="external-link">https://shiny.rstudio.com/articles/modules.html</a> to learn more.</p></div>

  <div data-section="usage"><div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">moduleServer</span>(id, module, <span class="at">session =</span> <span class="fu">getDefaultReactiveDomain</span>())</span></code></pre></div></div>

  <div data-section="arguments">
    <h3 id="arguments">Arguments</h3>
    <dl><dt>id</dt>
<dd><p>An ID string that corresponds with the ID used to call the module's
UI function.</p></dd>


<dt>module</dt>
<dd><p>A Shiny module server function.</p></dd>


<dt>session</dt>
<dd><p>Session from which to make a child scope (the default should
almost always be used).</p></dd>

</dl></div>
  <div data-section="value">
    <h3 id="value">Value</h3>
    

<p>The return value, if any, from executing the module server function</p>
  </div>
  <div data-section="details">
    <h3 id="details">Details</h3>
    <p>Starting in Shiny 1.5.0, we recommend using <code>moduleServer</code> instead of
<code><a href="callModule.html">callModule()</a></code>, because the syntax is a little easier
to understand, and modules created with <code>moduleServer</code> can be tested with
<code><a href="testServer.html">testServer()</a></code>.</p>
  </div>
  <div data-section="see-also">
    <h3 id="see-also">See also</h3>
    <div class="dont-index"><p><a href="https://shiny.rstudio.com/articles/modules.html" class="external-link">https://shiny.rstudio.com/articles/modules.html</a></p></div>
  </div>

  <div data-section="examples">
    <h3 id="examples">Examples</h3>
    <div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="co"># Define the UI for a module</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>counterUI <span class="ot">&lt;-</span> <span class="cf">function</span>(id, <span class="at">label =</span> <span class="st">"Counter"</span>) {</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a>  ns <span class="ot">&lt;-</span> <span class="fu">NS</span>(id)</span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>  <span class="fu">tagList</span>(</span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>    <span class="fu">actionButton</span>(<span class="fu">ns</span>(<span class="st">"button"</span>), <span class="at">label =</span> label),</span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a>    <span class="fu">verbatimTextOutput</span>(<span class="fu">ns</span>(<span class="st">"out"</span>))</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a>  )</span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a>}</span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a></span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a><span class="co"># Define the server logic for a module</span></span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a>counterServer <span class="ot">&lt;-</span> <span class="cf">function</span>(id) {</span>
<span id="cb1-12"><a href="#cb1-12" tabindex="-1"></a>  <span class="fu">moduleServer</span>(</span>
<span id="cb1-13"><a href="#cb1-13" tabindex="-1"></a>    id,</span>
<span id="cb1-14"><a href="#cb1-14" tabindex="-1"></a>    <span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-15"><a href="#cb1-15" tabindex="-1"></a>      count <span class="ot">&lt;-</span> <span class="fu">reactiveVal</span>(<span class="dv">0</span>)</span>
<span id="cb1-16"><a href="#cb1-16" tabindex="-1"></a>      <span class="fu">observeEvent</span>(input<span class="sc">$</span>button, {</span>
<span id="cb1-17"><a href="#cb1-17" tabindex="-1"></a>        <span class="fu">count</span>(<span class="fu">count</span>() <span class="sc">+</span> <span class="dv">1</span>)</span>
<span id="cb1-18"><a href="#cb1-18" tabindex="-1"></a>      })</span>
<span id="cb1-19"><a href="#cb1-19" tabindex="-1"></a>      output<span class="sc">$</span>out <span class="ot">&lt;-</span> <span class="fu">renderText</span>({</span>
<span id="cb1-20"><a href="#cb1-20" tabindex="-1"></a>        <span class="fu">count</span>()</span>
<span id="cb1-21"><a href="#cb1-21" tabindex="-1"></a>      })</span>
<span id="cb1-22"><a href="#cb1-22" tabindex="-1"></a>      count</span>
<span id="cb1-23"><a href="#cb1-23" tabindex="-1"></a>    }</span>
<span id="cb1-24"><a href="#cb1-24" tabindex="-1"></a>  )</span>
<span id="cb1-25"><a href="#cb1-25" tabindex="-1"></a>}</span>
<span id="cb1-26"><a href="#cb1-26" tabindex="-1"></a></span>
<span id="cb1-27"><a href="#cb1-27" tabindex="-1"></a><span class="co"># Use the module in an app</span></span>
<span id="cb1-28"><a href="#cb1-28" tabindex="-1"></a>ui <span class="ot">&lt;-</span> <span class="fu">fluidPage</span>(</span>
<span id="cb1-29"><a href="#cb1-29" tabindex="-1"></a>  <span class="fu">counterUI</span>(<span class="st">"counter1"</span>, <span class="st">"Counter #1"</span>),</span>
<span id="cb1-30"><a href="#cb1-30" tabindex="-1"></a>  <span class="fu">counterUI</span>(<span class="st">"counter2"</span>, <span class="st">"Counter #2"</span>)</span>
<span id="cb1-31"><a href="#cb1-31" tabindex="-1"></a>)</span>
<span id="cb1-32"><a href="#cb1-32" tabindex="-1"></a>server <span class="ot">&lt;-</span> <span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-33"><a href="#cb1-33" tabindex="-1"></a>  <span class="fu">counterServer</span>(<span class="st">"counter1"</span>)</span>
<span id="cb1-34"><a href="#cb1-34" tabindex="-1"></a>  <span class="fu">counterServer</span>(<span class="st">"counter2"</span>)</span>
<span id="cb1-35"><a href="#cb1-35" tabindex="-1"></a>}</span>
<span id="cb1-36"><a href="#cb1-36" tabindex="-1"></a><span class="cf">if</span> (<span class="fu">interactive</span>()) {</span>
<span id="cb1-37"><a href="#cb1-37" tabindex="-1"></a>  <span class="fu">shinyApp</span>(ui, server)</span>
<span id="cb1-38"><a href="#cb1-38" tabindex="-1"></a>}</span>
<span id="cb1-39"><a href="#cb1-39" tabindex="-1"></a></span>
<span id="cb1-40"><a href="#cb1-40" tabindex="-1"></a></span>
<span id="cb1-41"><a href="#cb1-41" tabindex="-1"></a></span>
<span id="cb1-42"><a href="#cb1-42" tabindex="-1"></a><span class="co"># If you want to pass extra parameters to the module's server logic, you can</span></span>
<span id="cb1-43"><a href="#cb1-43" tabindex="-1"></a><span class="co"># add them to your function. In this case `prefix` is text that will be</span></span>
<span id="cb1-44"><a href="#cb1-44" tabindex="-1"></a><span class="co"># printed before the count.</span></span>
<span id="cb1-45"><a href="#cb1-45" tabindex="-1"></a>counterServer2 <span class="ot">&lt;-</span> <span class="cf">function</span>(id, <span class="at">prefix =</span> <span class="cn">NULL</span>) {</span>
<span id="cb1-46"><a href="#cb1-46" tabindex="-1"></a>  <span class="fu">moduleServer</span>(</span>
<span id="cb1-47"><a href="#cb1-47" tabindex="-1"></a>    id,</span>
<span id="cb1-48"><a href="#cb1-48" tabindex="-1"></a>    <span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-49"><a href="#cb1-49" tabindex="-1"></a>      count <span class="ot">&lt;-</span> <span class="fu">reactiveVal</span>(<span class="dv">0</span>)</span>
<span id="cb1-50"><a href="#cb1-50" tabindex="-1"></a>      <span class="fu">observeEvent</span>(input<span class="sc">$</span>button, {</span>
<span id="cb1-51"><a href="#cb1-51" tabindex="-1"></a>        <span class="fu">count</span>(<span class="fu">count</span>() <span class="sc">+</span> <span class="dv">1</span>)</span>
<span id="cb1-52"><a href="#cb1-52" tabindex="-1"></a>      })</span>
<span id="cb1-53"><a href="#cb1-53" tabindex="-1"></a>      output<span class="sc">$</span>out <span class="ot">&lt;-</span> <span class="fu">renderText</span>({</span>
<span id="cb1-54"><a href="#cb1-54" tabindex="-1"></a>        <span class="fu">paste0</span>(prefix, <span class="fu">count</span>())</span>
<span id="cb1-55"><a href="#cb1-55" tabindex="-1"></a>      })</span>
<span id="cb1-56"><a href="#cb1-56" tabindex="-1"></a>      count</span>
<span id="cb1-57"><a href="#cb1-57" tabindex="-1"></a>    }</span>
<span id="cb1-58"><a href="#cb1-58" tabindex="-1"></a>  )</span>
<span id="cb1-59"><a href="#cb1-59" tabindex="-1"></a>}</span>
<span id="cb1-60"><a href="#cb1-60" tabindex="-1"></a></span>
<span id="cb1-61"><a href="#cb1-61" tabindex="-1"></a>ui <span class="ot">&lt;-</span> <span class="fu">fluidPage</span>(</span>
<span id="cb1-62"><a href="#cb1-62" tabindex="-1"></a>  <span class="fu">counterUI</span>(<span class="st">"counter"</span>, <span class="st">"Counter"</span>),</span>
<span id="cb1-63"><a href="#cb1-63" tabindex="-1"></a>)</span>
<span id="cb1-64"><a href="#cb1-64" tabindex="-1"></a>server <span class="ot">&lt;-</span> <span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-65"><a href="#cb1-65" tabindex="-1"></a>  <span class="fu">counterServer2</span>(<span class="st">"counter"</span>, <span class="st">"The current count is: "</span>)</span>
<span id="cb1-66"><a href="#cb1-66" tabindex="-1"></a>}</span>
<span id="cb1-67"><a href="#cb1-67" tabindex="-1"></a><span class="cf">if</span> (<span class="fu">interactive</span>()) {</span>
<span id="cb1-68"><a href="#cb1-68" tabindex="-1"></a>  <span class="fu">shinyApp</span>(ui, server)</span>
<span id="cb1-69"><a href="#cb1-69" tabindex="-1"></a>}</span></code></pre></div>
  </div>
</div>
```
