---
title: "Run code after an application or session ends â€” onStop"
---

```{=html}
<div class="reference">
  <small class="dont-index pkg-version">v1.9.0</small><small class="dont-index pipe">|</small><small class="dont-index github-source">Source: <a href="https://github.com/rstudio/shiny/blob/v1.9.0/R/shiny.R" class="external-link"><code>R/shiny.R</code></a></small>

  <div data-section="description"><h3>Description</h3><p>This function registers callback functions that are invoked when the
application exits (when <code><a href="runApp.html">runApp()</a></code> exits), or after each user
session ends (when a client disconnects).</p></div>

  <div data-section="usage"><div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">onStop</span>(fun, <span class="at">session =</span> <span class="fu">getDefaultReactiveDomain</span>())</span></code></pre></div></div>

  <div data-section="arguments">
    <h3 id="arguments">Arguments</h3>
    <dl><dt>fun</dt>
<dd><p>A function that will be called after the app has finished running.</p></dd>


<dt>session</dt>
<dd><p>A scope for when the callback will run. If <code>onStop</code> is
called from within the server function, this will default to the current
session, and the callback will be invoked when the current session ends. If
<code>onStop</code> is called outside a server function, then the callback will
be invoked with the application exits. If <code>NULL</code>, it is the same as
calling <code>onStop</code> outside of the server function, and the callback will
be invoked when the application exits.</p></dd>

</dl></div>
  <div data-section="value">
    <h3 id="value">Value</h3>
    

<p>A function which, if invoked, will cancel the callback.</p>
  </div>
  <div data-section="see-also">
    <h3 id="see-also">See also</h3>
    <div class="dont-index"><p><code><a href="onFlush.html">onSessionEnded()</a></code> for the same functionality, but at
the session level only.</p></div>
  </div>

  <div data-section="examples">
    <h3 id="examples">Examples</h3>
    <div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="do">## Only run this example in interactive R sessions</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a><span class="cf">if</span> (<span class="fu">interactive</span>()) {</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a>  <span class="co"># Open this application in multiple browsers, then close the browsers.</span></span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>  <span class="fu">shinyApp</span>(</span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>    <span class="at">ui =</span> <span class="fu">basicPage</span>(<span class="st">"onStop demo"</span>),</span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a></span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a>    <span class="at">server =</span> <span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a>      <span class="fu">onStop</span>(<span class="cf">function</span>() <span class="fu">cat</span>(<span class="st">"Session stopped</span><span class="sc">\n</span><span class="st">"</span>))</span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a>    },</span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a>    <span class="at">onStart =</span> <span class="cf">function</span>() {</span>
<span id="cb1-12"><a href="#cb1-12" tabindex="-1"></a>      <span class="fu">cat</span>(<span class="st">"Doing application setup</span><span class="sc">\n</span><span class="st">"</span>)</span>
<span id="cb1-13"><a href="#cb1-13" tabindex="-1"></a></span>
<span id="cb1-14"><a href="#cb1-14" tabindex="-1"></a>      <span class="fu">onStop</span>(<span class="cf">function</span>() {</span>
<span id="cb1-15"><a href="#cb1-15" tabindex="-1"></a>        <span class="fu">cat</span>(<span class="st">"Doing application cleanup</span><span class="sc">\n</span><span class="st">"</span>)</span>
<span id="cb1-16"><a href="#cb1-16" tabindex="-1"></a>      })</span>
<span id="cb1-17"><a href="#cb1-17" tabindex="-1"></a>    }</span>
<span id="cb1-18"><a href="#cb1-18" tabindex="-1"></a>  )</span>
<span id="cb1-19"><a href="#cb1-19" tabindex="-1"></a>}</span>
<span id="cb1-20"><a href="#cb1-20" tabindex="-1"></a><span class="co"># In the example above, onStop() is called inside of onStart(). This is</span></span>
<span id="cb1-21"><a href="#cb1-21" tabindex="-1"></a><span class="co"># the pattern that should be used when creating a shinyApp() object from</span></span>
<span id="cb1-22"><a href="#cb1-22" tabindex="-1"></a><span class="co"># a function, or at the console. If instead you are writing an app.R which</span></span>
<span id="cb1-23"><a href="#cb1-23" tabindex="-1"></a><span class="co"># will be invoked with runApp(), you can do it that way, or put the onStop()</span></span>
<span id="cb1-24"><a href="#cb1-24" tabindex="-1"></a><span class="co"># before the shinyApp() call, as shown below.</span></span>
<span id="cb1-25"><a href="#cb1-25" tabindex="-1"></a></span>
<span id="cb1-26"><a href="#cb1-26" tabindex="-1"></a><span class="cf">if</span> (<span class="cn">FALSE</span>) {</span>
<span id="cb1-27"><a href="#cb1-27" tabindex="-1"></a><span class="co"># ==== app.R ====</span></span>
<span id="cb1-28"><a href="#cb1-28" tabindex="-1"></a><span class="fu">cat</span>(<span class="st">"Doing application setup</span><span class="sc">\n</span><span class="st">"</span>)</span>
<span id="cb1-29"><a href="#cb1-29" tabindex="-1"></a><span class="fu">onStop</span>(<span class="cf">function</span>() {</span>
<span id="cb1-30"><a href="#cb1-30" tabindex="-1"></a>  <span class="fu">cat</span>(<span class="st">"Doing application cleanup</span><span class="sc">\n</span><span class="st">"</span>)</span>
<span id="cb1-31"><a href="#cb1-31" tabindex="-1"></a>})</span>
<span id="cb1-32"><a href="#cb1-32" tabindex="-1"></a></span>
<span id="cb1-33"><a href="#cb1-33" tabindex="-1"></a><span class="fu">shinyApp</span>(</span>
<span id="cb1-34"><a href="#cb1-34" tabindex="-1"></a>  <span class="at">ui =</span> <span class="fu">basicPage</span>(<span class="st">"onStop demo"</span>),</span>
<span id="cb1-35"><a href="#cb1-35" tabindex="-1"></a></span>
<span id="cb1-36"><a href="#cb1-36" tabindex="-1"></a>  <span class="at">server =</span> <span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-37"><a href="#cb1-37" tabindex="-1"></a>    <span class="fu">onStop</span>(<span class="cf">function</span>() <span class="fu">cat</span>(<span class="st">"Session stopped</span><span class="sc">\n</span><span class="st">"</span>))</span>
<span id="cb1-38"><a href="#cb1-38" tabindex="-1"></a>  }</span>
<span id="cb1-39"><a href="#cb1-39" tabindex="-1"></a>)</span>
<span id="cb1-40"><a href="#cb1-40" tabindex="-1"></a><span class="co"># ==== end app.R ====</span></span>
<span id="cb1-41"><a href="#cb1-41" tabindex="-1"></a></span>
<span id="cb1-42"><a href="#cb1-42" tabindex="-1"></a></span>
<span id="cb1-43"><a href="#cb1-43" tabindex="-1"></a><span class="co"># Similarly, if you have a global.R, you can call onStop() from there.</span></span>
<span id="cb1-44"><a href="#cb1-44" tabindex="-1"></a><span class="co"># ==== global.R ====</span></span>
<span id="cb1-45"><a href="#cb1-45" tabindex="-1"></a><span class="fu">cat</span>(<span class="st">"Doing application setup</span><span class="sc">\n</span><span class="st">"</span>)</span>
<span id="cb1-46"><a href="#cb1-46" tabindex="-1"></a><span class="fu">onStop</span>(<span class="cf">function</span>() {</span>
<span id="cb1-47"><a href="#cb1-47" tabindex="-1"></a>  <span class="fu">cat</span>(<span class="st">"Doing application cleanup</span><span class="sc">\n</span><span class="st">"</span>)</span>
<span id="cb1-48"><a href="#cb1-48" tabindex="-1"></a>})</span>
<span id="cb1-49"><a href="#cb1-49" tabindex="-1"></a><span class="co"># ==== end global.R ====</span></span>
<span id="cb1-50"><a href="#cb1-50" tabindex="-1"></a>}</span></code></pre></div>
  </div>
</div>
```
