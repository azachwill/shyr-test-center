---
title: "Reactive testing for Shiny server functions and modules â€” testServer"
---

```{=html}
<div class="reference">
  <small class="dont-index pkg-version">v1.7.4</small><small class="dont-index pipe">|</small><small class="dont-index github-source">Source: <a href="https://github.com/rstudio/shiny/blob/v1.7.4/R/test-server.R" class="external-link"><code>R/test-server.R</code></a></small>

  <div data-section="description"><h3>Description</h3><p>A way to test the reactive interactions in Shiny applications. Reactive
interactions are defined in the server function of applications and in
modules.</p></div>

  <div data-section="usage"><div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">testServer</span>(<span class="at">app =</span> <span class="cn">NULL</span>, expr, <span class="at">args =</span> <span class="fu">list</span>(), <span class="at">session =</span> MockShinySession<span class="sc">$</span><span class="fu">new</span>())</span></code></pre></div></div>

  <div data-section="arguments">
    <h3 id="arguments">Arguments</h3>
    <dl><dt>app</dt>
<dd><p>A server function (i.e. a function with <code>input</code>, <code>output</code>,
and <code>session</code>), or a module function (i.e. a function with first
argument <code>id</code> that calls <code><a href="moduleServer.html">moduleServer()</a></code>.</p>
<p>You can also provide an app, a path an app, or anything that
<code><a href="shiny.appobj.html">as.shiny.appobj()</a></code> can handle.</p></dd>


<dt>expr</dt>
<dd><p>Test code containing expectations. The objects from inside the
server function environment will be made available in the environment of
the test expression (this is done using a data mask with
<code><a href="https://rlang.r-lib.org/reference/eval_tidy.html" class="external-link">rlang::eval_tidy()</a></code>). This includes the parameters of the server function
(e.g. <code>input</code>, <code>output</code>, and <code>session</code>), along with any other values
created inside of the server function.</p></dd>


<dt>args</dt>
<dd><p>Additional arguments to pass to the module function. If <code>app</code> is
a module, and no <code>id</code> argument is provided, one will be generated and
supplied automatically.</p></dd>


<dt>session</dt>
<dd><p>The <code><a href="MockShinySession.html">MockShinySession</a></code> object to use as the <a href="domains.html">reactive domain</a>. The same session object is used as the domain both
during invocation of the server or module under test and during evaluation
of <code>expr</code>.</p></dd>

</dl></div>

  <div data-section="examples">
    <h3 id="examples">Examples</h3>
    <div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="co"># Testing a server function  ----------------------------------------------</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>server <span class="ot">&lt;-</span> <span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a>  x <span class="ot">&lt;-</span> <span class="fu">reactive</span>(input<span class="sc">$</span>a <span class="sc">*</span> input<span class="sc">$</span>b)</span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>}</span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a></span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a><span class="fu">testServer</span>(server, {</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a>  session<span class="sc">$</span><span class="fu">setInputs</span>(<span class="at">a =</span> <span class="dv">2</span>, <span class="at">b =</span> <span class="dv">3</span>)</span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a>  <span class="fu">stopifnot</span>(<span class="fu">x</span>() <span class="sc">==</span> <span class="dv">6</span>)</span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a>})</span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a></span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a></span>
<span id="cb1-12"><a href="#cb1-12" tabindex="-1"></a><span class="co"># Testing a module --------------------------------------------------------</span></span>
<span id="cb1-13"><a href="#cb1-13" tabindex="-1"></a>myModuleServer <span class="ot">&lt;-</span> <span class="cf">function</span>(id, <span class="at">multiplier =</span> <span class="dv">2</span>, <span class="at">prefix =</span> <span class="st">"I am "</span>) {</span>
<span id="cb1-14"><a href="#cb1-14" tabindex="-1"></a>  <span class="fu">moduleServer</span>(id, <span class="cf">function</span>(input, output, session) {</span>
<span id="cb1-15"><a href="#cb1-15" tabindex="-1"></a>    myreactive <span class="ot">&lt;-</span> <span class="fu">reactive</span>({</span>
<span id="cb1-16"><a href="#cb1-16" tabindex="-1"></a>      input<span class="sc">$</span>x <span class="sc">*</span> multiplier</span>
<span id="cb1-17"><a href="#cb1-17" tabindex="-1"></a>    })</span>
<span id="cb1-18"><a href="#cb1-18" tabindex="-1"></a>    output<span class="sc">$</span>txt <span class="ot">&lt;-</span> <span class="fu">renderText</span>({</span>
<span id="cb1-19"><a href="#cb1-19" tabindex="-1"></a>      <span class="fu">paste0</span>(prefix, <span class="fu">myreactive</span>())</span>
<span id="cb1-20"><a href="#cb1-20" tabindex="-1"></a>    })</span>
<span id="cb1-21"><a href="#cb1-21" tabindex="-1"></a>  })</span>
<span id="cb1-22"><a href="#cb1-22" tabindex="-1"></a>}</span>
<span id="cb1-23"><a href="#cb1-23" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" tabindex="-1"></a><span class="fu">testServer</span>(myModuleServer, <span class="at">args =</span> <span class="fu">list</span>(<span class="at">multiplier =</span> <span class="dv">2</span>), {</span>
<span id="cb1-25"><a href="#cb1-25" tabindex="-1"></a>  session<span class="sc">$</span><span class="fu">setInputs</span>(<span class="at">x =</span> <span class="dv">1</span>)</span>
<span id="cb1-26"><a href="#cb1-26" tabindex="-1"></a>  <span class="co"># You're also free to use third-party</span></span>
<span id="cb1-27"><a href="#cb1-27" tabindex="-1"></a>  <span class="co"># testing packages like testthat:</span></span>
<span id="cb1-28"><a href="#cb1-28" tabindex="-1"></a>  <span class="co">#   expect_equal(myreactive(), 2)</span></span>
<span id="cb1-29"><a href="#cb1-29" tabindex="-1"></a>  <span class="fu">stopifnot</span>(<span class="fu">myreactive</span>() <span class="sc">==</span> <span class="dv">2</span>)</span>
<span id="cb1-30"><a href="#cb1-30" tabindex="-1"></a>  <span class="fu">stopifnot</span>(output<span class="sc">$</span>txt <span class="sc">==</span> <span class="st">"I am 2"</span>)</span>
<span id="cb1-31"><a href="#cb1-31" tabindex="-1"></a></span>
<span id="cb1-32"><a href="#cb1-32" tabindex="-1"></a>  session<span class="sc">$</span><span class="fu">setInputs</span>(<span class="at">x =</span> <span class="dv">2</span>)</span>
<span id="cb1-33"><a href="#cb1-33" tabindex="-1"></a>  <span class="fu">stopifnot</span>(<span class="fu">myreactive</span>() <span class="sc">==</span> <span class="dv">4</span>)</span>
<span id="cb1-34"><a href="#cb1-34" tabindex="-1"></a>  <span class="fu">stopifnot</span>(output<span class="sc">$</span>txt <span class="sc">==</span> <span class="st">"I am 4"</span>)</span>
<span id="cb1-35"><a href="#cb1-35" tabindex="-1"></a>  <span class="co"># Any additional arguments, below, are passed along to the module.</span></span>
<span id="cb1-36"><a href="#cb1-36" tabindex="-1"></a>})</span></code></pre></div>
  </div>
</div>
```
