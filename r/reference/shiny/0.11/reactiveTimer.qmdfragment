---
title: "reactiveTimer"
---

```{=html}

<pre class="code"><code class="r"><span class="functioncall"><a href='reactiveTimer.html'>reactiveTimer</a></span><span class="keyword">(</span><span class="argument">intervalMs</span>&nbsp;<span class="argument">=</span>&nbsp;<span class="number">1000</span><span class="keyword">,</span> <span class="symbol">session</span><span class="keyword">)</span></code></pre>

<h3 data-swiftype-index="false">Arguments</h3>
<table class="arguments">
  <tr>
    <th>intervalMs</th>
    <td>How often to fire, in milliseconds</td>
  </tr>
  <tr>
    <th>session</th>
    <td>A session object. This is needed to cancel any scheduled
invalidations after a user has ended the session. If <code>NULL</code>, then
this invalidation will not be tied to any session, and so it will still
occur.</td>
  </tr>
</table>

<div data-section="Value">
  <h3 data-swiftype-index="false">Value</h3>

  <p><dl>
A no-parameter function that can be called from a reactive context,
  in order to cause that context to be invalidated the next time the timer
  interval elapses. Calling the returned function also happens to yield the
  current time (as in <code><a href='http://www.rdocumentation.org/packages/base/topics/Sys.time'>Sys.time</a></code>).
</dl></p>

</div>

<div data-section="Description">
  <h3 data-swiftype-index="false">Description</h3>

  <p>Creates a reactive timer with the given interval. A reactive timer is like a
reactive value, except reactive values are triggered when they are set, while
reactive timers are triggered simply by the passage of time.</p>

</div>

<div data-section="Details">
  <h3 data-swiftype-index="false">Details</h3>

  <p><a href='reactive.html'>Reactive expressions</a> and observers that want to be
invalidated by the timer need to call the timer function that
<code>reactiveTimer</code> returns, even if the current time value is not actually
needed.</p>

  <p>See <code><a href='invalidateLater.html'>invalidateLater</a></code> as a safer and simpler alternative.</p>

</div>

<h3 id="examples" data-swiftype-index="false">Examples</h3>
<pre class="examples"><code class="r"><div class='input'><span class="comment">## Not run: ------------------------------------</span>
<span class="comment"># shinyServer(function(input, output, session) {</span>
<span class="comment"># </span>
<span class="comment">#   # Anything that calls autoInvalidate will automatically invalidate</span>
<span class="comment">#   # every 2 seconds.</span>
<span class="comment">#   autoInvalidate &lt;- reactiveTimer(2000, session)</span>
<span class="comment"># </span>
<span class="comment">#   observe({</span>
<span class="comment">#     # Invalidate and re-execute this reactive expression every time the</span>
<span class="comment">#     # timer fires.</span>
<span class="comment">#     autoInvalidate()</span>
<span class="comment"># </span>
<span class="comment">#     # Do something each time this is invalidated.</span>
<span class="comment">#     # The isolate() makes this observer _not_ get invalidated and re-executed</span>
<span class="comment">#     # when input$n changes.</span>
<span class="comment">#     print(paste("The value of input$n is", isolate(input$n)))</span>
<span class="comment">#   })</span>
<span class="comment"># </span>
<span class="comment">#   # Generate a new histogram each time the timer fires, but not when</span>
<span class="comment">#   # input$n changes.</span>
<span class="comment">#   output$plot &lt;- renderPlot({</span>
<span class="comment">#     autoInvalidate()</span>
<span class="comment">#     hist(isolate(input$n))</span>
<span class="comment">#   })</span>
<span class="comment"># })</span>
<span class="comment">## ---------------------------------------------</span></div></code></pre>
<!-- <ul>
  <li>reactiveTimer</li>
</ul>
<ul>
  
</ul> -->

<div data-swiftype-index="false">
<h3>See also</h3>
  <p><code><a href='invalidateLater.html'>invalidateLater</a></code></p>
</div>
```
