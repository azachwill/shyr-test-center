---
title: "Create an object for storing reactive values â€” reactiveValues"
---

```{=html}
<div class="reference">
  <small class="dont-index pkg-version">v1.7.2</small><small class="dont-index pipe">|</small><small class="dont-index github-source">Source: <a href="https://github.com/rstudio/shiny/blob/v1.7.2/R/reactives.R" class="external-link"><code>R/reactives.R</code></a></small>

  <div data-section="description"><h3>Description</h3><p>This function returns an object for storing reactive values. It is similar to
a list, but with special capabilities for reactive programming. When you read
a value from it, the calling reactive expression takes a reactive dependency
on that value, and when you write to it, it notifies any reactive functions
that depend on that value. Note that values taken from the reactiveValues
object are reactive, but the reactiveValues object itself is not.</p></div>

  <div data-section="usage"><div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">reactiveValues</span>(...)</span></code></pre></div></div>

  <div data-section="arguments">
    <h3 id="arguments">Arguments</h3>
    <dl><dt>...</dt>
<dd><p>Objects that will be added to the reactivevalues object. All of
these objects must be named.</p></dd>

</dl></div>
  <div data-section="see-also">
    <h3 id="see-also">See also</h3>
    <div class="dont-index"><p><code><a href="isolate.html">isolate()</a></code> and <code><a href="is.reactivevalues.html">is.reactivevalues()</a></code>.</p></div>
  </div>

  <div data-section="examples">
    <h3 id="examples">Examples</h3>
    <div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="co"># Create the object with no values</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>values <span class="ot">&lt;-</span> <span class="fu">reactiveValues</span>()</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a></span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a><span class="co"># Assign values to 'a' and 'b'</span></span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>values<span class="sc">$</span>a <span class="ot">&lt;-</span> <span class="dv">3</span></span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a>values[[<span class="st">'b'</span>]] <span class="ot">&lt;-</span> <span class="dv">4</span></span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a></span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a><span class="cf">if</span> (<span class="cn">FALSE</span>) {</span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a><span class="co"># From within a reactive context, you can access values with:</span></span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a>values<span class="sc">$</span>a</span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a>values[[<span class="st">'a'</span>]]</span>
<span id="cb1-12"><a href="#cb1-12" tabindex="-1"></a>}</span>
<span id="cb1-13"><a href="#cb1-13" tabindex="-1"></a></span>
<span id="cb1-14"><a href="#cb1-14" tabindex="-1"></a><span class="co"># If not in a reactive context (e.g., at the console), you can use isolate()</span></span>
<span id="cb1-15"><a href="#cb1-15" tabindex="-1"></a><span class="co"># to retrieve the value:</span></span>
<span id="cb1-16"><a href="#cb1-16" tabindex="-1"></a><span class="fu">isolate</span>(values<span class="sc">$</span>a)</span>
<span id="cb1-17"><a href="#cb1-17" tabindex="-1"></a><span class="fu">isolate</span>(values[[<span class="st">'a'</span>]])</span>
<span id="cb1-18"><a href="#cb1-18" tabindex="-1"></a></span>
<span id="cb1-19"><a href="#cb1-19" tabindex="-1"></a><span class="co"># Set values upon creation</span></span>
<span id="cb1-20"><a href="#cb1-20" tabindex="-1"></a>values <span class="ot">&lt;-</span> <span class="fu">reactiveValues</span>(<span class="at">a =</span> <span class="dv">1</span>, <span class="at">b =</span> <span class="dv">2</span>)</span>
<span id="cb1-21"><a href="#cb1-21" tabindex="-1"></a><span class="fu">isolate</span>(values<span class="sc">$</span>a)</span></code></pre></div>
  </div>
</div>
```
