---
title: "Text Output â€” renderPrint"
---

```{=html}
<div class="reference">
  <small class="dont-index pkg-version">v1.7.2</small><small class="dont-index pipe">|</small><small class="dont-index github-source">Source: <a href="https://github.com/rstudio/shiny/blob/v1.7.2/R/shinywrappers.R" class="external-link"><code>R/shinywrappers.R</code></a></small>

  <div data-section="description"><h3>Description</h3><p><code>renderPrint()</code> prints the result of <code>expr</code>, while <code>renderText()</code> pastes it
together into a single string. <code>renderPrint()</code> is equivalent to <code><a href="https://rdrr.io/r/base/print.html" class="external-link">print()</a></code>;
<code>renderText()</code> is equivalent to <code><a href="https://rdrr.io/r/base/cat.html" class="external-link">cat()</a></code>. Both functions capture all other
printed output generated while evaluating <code>expr</code>.</p>
<p><code>renderPrint()</code> is usually paired with <code><a href="textOutput.html">verbatimTextOutput()</a></code>;
<code>renderText()</code> is usually paired with <code><a href="textOutput.html">textOutput()</a></code>.</p></div>

  <div data-section="usage"><div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">renderPrint</span>(</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a>  expr,</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a>  <span class="at">env =</span> <span class="fu">parent.frame</span>(),</span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>  <span class="at">quoted =</span> <span class="cn">FALSE</span>,</span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>  <span class="at">width =</span> <span class="fu">getOption</span>(<span class="st">"width"</span>),</span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a>  <span class="at">outputArgs =</span> <span class="fu">list</span>()</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a>)</span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a><span class="fu">renderText</span>(</span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a>  expr,</span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a>  <span class="at">env =</span> <span class="fu">parent.frame</span>(),</span>
<span id="cb1-12"><a href="#cb1-12" tabindex="-1"></a>  <span class="at">quoted =</span> <span class="cn">FALSE</span>,</span>
<span id="cb1-13"><a href="#cb1-13" tabindex="-1"></a>  <span class="at">outputArgs =</span> <span class="fu">list</span>(),</span>
<span id="cb1-14"><a href="#cb1-14" tabindex="-1"></a>  <span class="at">sep =</span> <span class="st">" "</span></span>
<span id="cb1-15"><a href="#cb1-15" tabindex="-1"></a>)</span></code></pre></div></div>

  <div data-section="arguments">
    <h3 id="arguments">Arguments</h3>
    <dl><dt>expr</dt>
<dd><p>An expression to evaluate.</p></dd>


<dt>env</dt>
<dd><p>The parent environment for the reactive expression. By default,
this is the calling environment, the same as when defining an ordinary
non-reactive expression. If <code>expr</code> is a quosure and <code>quoted</code> is <code>TRUE</code>,
then <code>env</code> is ignored.</p></dd>


<dt>quoted</dt>
<dd><p>If it is <code>TRUE</code>, then the <code><a href="https://rdrr.io/r/base/substitute.html" class="external-link">quote()</a></code>ed value of <code>expr</code>
will be used when <code>expr</code> is evaluated. If <code>expr</code> is a quosure and you
would like to use its expression as a value for <code>expr</code>, then you must set
<code>quoted</code> to <code>TRUE</code>.</p></dd>


<dt>width</dt>
<dd><p>Width of printed output.</p></dd>


<dt>outputArgs</dt>
<dd><p>A list of arguments to be passed through to the implicit
call to <code><a href="textOutput.html">verbatimTextOutput()</a></code> or <code><a href="textOutput.html">textOutput()</a></code> when the functions are
used in an interactive RMarkdown document.</p></dd>


<dt>sep</dt>
<dd><p>A separator passed to <code>cat</code> to be appended after each
element.</p></dd>

</dl></div>
  <div data-section="value">
    <h3 id="value">Value</h3>
    

<p>For <code>renderPrint()</code>, note the given expression returns <code>NULL</code> then <code>NULL</code></p>


<p>will actually be visible in the output. To display nothing, make your
function return <code><a href="https://rdrr.io/r/base/invisible.html" class="external-link">invisible()</a></code>.</p>
  </div>
  <div data-section="details">
    <h3 id="details">Details</h3>
    <p>The corresponding HTML output tag can be anything (though <code>pre</code> is
recommended if you need a monospace font and whitespace preserved) and should
have the CSS class name <code>shiny-text-output</code>.</p>
  </div>

  <div data-section="examples">
    <h3 id="examples">Examples</h3>
    <div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">isolate</span>({</span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a></span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a><span class="co"># renderPrint captures any print output, converts it to a string, and</span></span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a><span class="co"># returns it</span></span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>visFun <span class="ot">&lt;-</span> <span class="fu">renderPrint</span>({ <span class="st">"foo"</span> })</span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a><span class="fu">visFun</span>()</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a><span class="co"># '[1] "foo"'</span></span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a></span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a>invisFun <span class="ot">&lt;-</span> <span class="fu">renderPrint</span>({ <span class="fu">invisible</span>(<span class="st">"foo"</span>) })</span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a><span class="fu">invisFun</span>()</span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a><span class="co"># ''</span></span>
<span id="cb1-12"><a href="#cb1-12" tabindex="-1"></a></span>
<span id="cb1-13"><a href="#cb1-13" tabindex="-1"></a>multiprintFun <span class="ot">&lt;-</span> <span class="fu">renderPrint</span>({</span>
<span id="cb1-14"><a href="#cb1-14" tabindex="-1"></a>  <span class="fu">print</span>(<span class="st">"foo"</span>);</span>
<span id="cb1-15"><a href="#cb1-15" tabindex="-1"></a>  <span class="st">"bar"</span></span>
<span id="cb1-16"><a href="#cb1-16" tabindex="-1"></a>})</span>
<span id="cb1-17"><a href="#cb1-17" tabindex="-1"></a><span class="fu">multiprintFun</span>()</span>
<span id="cb1-18"><a href="#cb1-18" tabindex="-1"></a><span class="co"># '[1] "foo"\n[1] "bar"'</span></span>
<span id="cb1-19"><a href="#cb1-19" tabindex="-1"></a></span>
<span id="cb1-20"><a href="#cb1-20" tabindex="-1"></a>nullFun <span class="ot">&lt;-</span> <span class="fu">renderPrint</span>({ <span class="cn">NULL</span> })</span>
<span id="cb1-21"><a href="#cb1-21" tabindex="-1"></a><span class="fu">nullFun</span>()</span>
<span id="cb1-22"><a href="#cb1-22" tabindex="-1"></a><span class="co"># 'NULL'</span></span>
<span id="cb1-23"><a href="#cb1-23" tabindex="-1"></a></span>
<span id="cb1-24"><a href="#cb1-24" tabindex="-1"></a>invisNullFun <span class="ot">&lt;-</span> <span class="fu">renderPrint</span>({ <span class="fu">invisible</span>(<span class="cn">NULL</span>) })</span>
<span id="cb1-25"><a href="#cb1-25" tabindex="-1"></a><span class="fu">invisNullFun</span>()</span>
<span id="cb1-26"><a href="#cb1-26" tabindex="-1"></a><span class="co"># ''</span></span>
<span id="cb1-27"><a href="#cb1-27" tabindex="-1"></a></span>
<span id="cb1-28"><a href="#cb1-28" tabindex="-1"></a>vecFun <span class="ot">&lt;-</span> <span class="fu">renderPrint</span>({ <span class="dv">1</span><span class="sc">:</span><span class="dv">5</span> })</span>
<span id="cb1-29"><a href="#cb1-29" tabindex="-1"></a><span class="fu">vecFun</span>()</span>
<span id="cb1-30"><a href="#cb1-30" tabindex="-1"></a><span class="co"># '[1] 1 2 3 4 5'</span></span>
<span id="cb1-31"><a href="#cb1-31" tabindex="-1"></a></span>
<span id="cb1-32"><a href="#cb1-32" tabindex="-1"></a></span>
<span id="cb1-33"><a href="#cb1-33" tabindex="-1"></a><span class="co"># Contrast with renderText, which takes the value returned from the function</span></span>
<span id="cb1-34"><a href="#cb1-34" tabindex="-1"></a><span class="co"># and uses cat() to convert it to a string</span></span>
<span id="cb1-35"><a href="#cb1-35" tabindex="-1"></a>visFun <span class="ot">&lt;-</span> <span class="fu">renderText</span>({ <span class="st">"foo"</span> })</span>
<span id="cb1-36"><a href="#cb1-36" tabindex="-1"></a><span class="fu">visFun</span>()</span>
<span id="cb1-37"><a href="#cb1-37" tabindex="-1"></a><span class="co"># 'foo'</span></span>
<span id="cb1-38"><a href="#cb1-38" tabindex="-1"></a></span>
<span id="cb1-39"><a href="#cb1-39" tabindex="-1"></a>invisFun <span class="ot">&lt;-</span> <span class="fu">renderText</span>({ <span class="fu">invisible</span>(<span class="st">"foo"</span>) })</span>
<span id="cb1-40"><a href="#cb1-40" tabindex="-1"></a><span class="fu">invisFun</span>()</span>
<span id="cb1-41"><a href="#cb1-41" tabindex="-1"></a><span class="co"># 'foo'</span></span>
<span id="cb1-42"><a href="#cb1-42" tabindex="-1"></a></span>
<span id="cb1-43"><a href="#cb1-43" tabindex="-1"></a>multiprintFun <span class="ot">&lt;-</span> <span class="fu">renderText</span>({</span>
<span id="cb1-44"><a href="#cb1-44" tabindex="-1"></a>  <span class="fu">print</span>(<span class="st">"foo"</span>);</span>
<span id="cb1-45"><a href="#cb1-45" tabindex="-1"></a>  <span class="st">"bar"</span></span>
<span id="cb1-46"><a href="#cb1-46" tabindex="-1"></a>})</span>
<span id="cb1-47"><a href="#cb1-47" tabindex="-1"></a><span class="fu">multiprintFun</span>()</span>
<span id="cb1-48"><a href="#cb1-48" tabindex="-1"></a><span class="co"># 'bar'</span></span>
<span id="cb1-49"><a href="#cb1-49" tabindex="-1"></a></span>
<span id="cb1-50"><a href="#cb1-50" tabindex="-1"></a>nullFun <span class="ot">&lt;-</span> <span class="fu">renderText</span>({ <span class="cn">NULL</span> })</span>
<span id="cb1-51"><a href="#cb1-51" tabindex="-1"></a><span class="fu">nullFun</span>()</span>
<span id="cb1-52"><a href="#cb1-52" tabindex="-1"></a><span class="co"># ''</span></span>
<span id="cb1-53"><a href="#cb1-53" tabindex="-1"></a></span>
<span id="cb1-54"><a href="#cb1-54" tabindex="-1"></a>invisNullFun <span class="ot">&lt;-</span> <span class="fu">renderText</span>({ <span class="fu">invisible</span>(<span class="cn">NULL</span>) })</span>
<span id="cb1-55"><a href="#cb1-55" tabindex="-1"></a><span class="fu">invisNullFun</span>()</span>
<span id="cb1-56"><a href="#cb1-56" tabindex="-1"></a><span class="co"># ''</span></span>
<span id="cb1-57"><a href="#cb1-57" tabindex="-1"></a></span>
<span id="cb1-58"><a href="#cb1-58" tabindex="-1"></a>vecFun <span class="ot">&lt;-</span> <span class="fu">renderText</span>({ <span class="dv">1</span><span class="sc">:</span><span class="dv">5</span> })</span>
<span id="cb1-59"><a href="#cb1-59" tabindex="-1"></a><span class="fu">vecFun</span>()</span>
<span id="cb1-60"><a href="#cb1-60" tabindex="-1"></a><span class="co"># '1 2 3 4 5'</span></span>
<span id="cb1-61"><a href="#cb1-61" tabindex="-1"></a></span>
<span id="cb1-62"><a href="#cb1-62" tabindex="-1"></a>})</span></code></pre></div>
  </div>
</div>
```
