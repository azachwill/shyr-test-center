---
title: "Conditional Panel â€” conditionalPanel"
---

```{=html}
<div class="reference">
  <small class="dont-index pkg-version">v1.7.2</small><small class="dont-index pipe">|</small><small class="dont-index github-source">Source: <a href="https://github.com/rstudio/shiny/blob/v1.7.2/R/bootstrap.R" class="external-link"><code>R/bootstrap.R</code></a></small>

  <div data-section="description"><h3>Description</h3><p>Creates a panel that is visible or not, depending on the value of a
JavaScript expression. The JS expression is evaluated once at startup and
whenever Shiny detects a relevant change in input/output.</p></div>

  <div data-section="usage"><div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="fu">conditionalPanel</span>(condition, ..., <span class="at">ns =</span> <span class="fu">NS</span>(<span class="cn">NULL</span>))</span></code></pre></div></div>

  <div data-section="arguments">
    <h3 id="arguments">Arguments</h3>
    <dl><dt>condition</dt>
<dd><p>A JavaScript expression that will be evaluated repeatedly to
determine whether the panel should be displayed.</p></dd>


<dt>...</dt>
<dd><p>Elements to include in the panel.</p></dd>


<dt>ns</dt>
<dd><p>The <code><a href="NS.html">namespace()</a></code> object of the current module, if
any.</p></dd>

</dl></div>
  <div data-section="details">
    <h3 id="details">Details</h3>
    <p>In the JS expression, you can refer to <code>input</code> and <code>output</code>
JavaScript objects that contain the current values of input and output. For
example, if you have an input with an id of <code>foo</code>, then you can use
<code>input.foo</code> to read its value. (Be sure not to modify the input/output
objects, as this may cause unpredictable behavior.)</p>
  </div>
  <div data-section="note">
    <h3 id="note">Note</h3>
    <p>You are not recommended to use special JavaScript characters such as a
period <code>.</code> in the input id's, but if you do use them anyway, for
example, <code>inputId = "foo.bar"</code>, you will have to use
<code>input["foo.bar"]</code> instead of <code>input.foo.bar</code> to read the input
value.</p>
  </div>

  <div data-section="examples">
    <h3 id="examples">Examples</h3>
    <div class="sourceCode"><pre class="sourceCode r"><code><span id="cb1-1"><a href="#cb1-1" tabindex="-1"></a><span class="do">## Only run this example in interactive R sessions</span></span>
<span id="cb1-2"><a href="#cb1-2" tabindex="-1"></a><span class="cf">if</span> (<span class="fu">interactive</span>()) {</span>
<span id="cb1-3"><a href="#cb1-3" tabindex="-1"></a>  ui <span class="ot">&lt;-</span> <span class="fu">fluidPage</span>(</span>
<span id="cb1-4"><a href="#cb1-4" tabindex="-1"></a>    <span class="fu">sidebarPanel</span>(</span>
<span id="cb1-5"><a href="#cb1-5" tabindex="-1"></a>      <span class="fu">selectInput</span>(<span class="st">"plotType"</span>, <span class="st">"Plot Type"</span>,</span>
<span id="cb1-6"><a href="#cb1-6" tabindex="-1"></a>        <span class="fu">c</span>(<span class="at">Scatter =</span> <span class="st">"scatter"</span>, <span class="at">Histogram =</span> <span class="st">"hist"</span>)</span>
<span id="cb1-7"><a href="#cb1-7" tabindex="-1"></a>      ),</span>
<span id="cb1-8"><a href="#cb1-8" tabindex="-1"></a>      <span class="co"># Only show this panel if the plot type is a histogram</span></span>
<span id="cb1-9"><a href="#cb1-9" tabindex="-1"></a>      <span class="fu">conditionalPanel</span>(</span>
<span id="cb1-10"><a href="#cb1-10" tabindex="-1"></a>        <span class="at">condition =</span> <span class="st">"input.plotType == 'hist'"</span>,</span>
<span id="cb1-11"><a href="#cb1-11" tabindex="-1"></a>        <span class="fu">selectInput</span>(</span>
<span id="cb1-12"><a href="#cb1-12" tabindex="-1"></a>          <span class="st">"breaks"</span>, <span class="st">"Breaks"</span>,</span>
<span id="cb1-13"><a href="#cb1-13" tabindex="-1"></a>          <span class="fu">c</span>(<span class="st">"Sturges"</span>, <span class="st">"Scott"</span>, <span class="st">"Freedman-Diaconis"</span>, <span class="st">"[Custom]"</span> <span class="ot">=</span> <span class="st">"custom"</span>)</span>
<span id="cb1-14"><a href="#cb1-14" tabindex="-1"></a>        ),</span>
<span id="cb1-15"><a href="#cb1-15" tabindex="-1"></a>        <span class="co"># Only show this panel if Custom is selected</span></span>
<span id="cb1-16"><a href="#cb1-16" tabindex="-1"></a>        <span class="fu">conditionalPanel</span>(</span>
<span id="cb1-17"><a href="#cb1-17" tabindex="-1"></a>          <span class="at">condition =</span> <span class="st">"input.breaks == 'custom'"</span>,</span>
<span id="cb1-18"><a href="#cb1-18" tabindex="-1"></a>          <span class="fu">sliderInput</span>(<span class="st">"breakCount"</span>, <span class="st">"Break Count"</span>, <span class="at">min =</span> <span class="dv">1</span>, <span class="at">max =</span> <span class="dv">50</span>, <span class="at">value =</span> <span class="dv">10</span>)</span>
<span id="cb1-19"><a href="#cb1-19" tabindex="-1"></a>        )</span>
<span id="cb1-20"><a href="#cb1-20" tabindex="-1"></a>      )</span>
<span id="cb1-21"><a href="#cb1-21" tabindex="-1"></a>    ),</span>
<span id="cb1-22"><a href="#cb1-22" tabindex="-1"></a>    <span class="fu">mainPanel</span>(</span>
<span id="cb1-23"><a href="#cb1-23" tabindex="-1"></a>      <span class="fu">plotOutput</span>(<span class="st">"plot"</span>)</span>
<span id="cb1-24"><a href="#cb1-24" tabindex="-1"></a>    )</span>
<span id="cb1-25"><a href="#cb1-25" tabindex="-1"></a>  )</span>
<span id="cb1-26"><a href="#cb1-26" tabindex="-1"></a></span>
<span id="cb1-27"><a href="#cb1-27" tabindex="-1"></a>  server <span class="ot">&lt;-</span> <span class="cf">function</span>(input, output) {</span>
<span id="cb1-28"><a href="#cb1-28" tabindex="-1"></a>    x <span class="ot">&lt;-</span> <span class="fu">rnorm</span>(<span class="dv">100</span>)</span>
<span id="cb1-29"><a href="#cb1-29" tabindex="-1"></a>    y <span class="ot">&lt;-</span> <span class="fu">rnorm</span>(<span class="dv">100</span>)</span>
<span id="cb1-30"><a href="#cb1-30" tabindex="-1"></a></span>
<span id="cb1-31"><a href="#cb1-31" tabindex="-1"></a>    output<span class="sc">$</span>plot <span class="ot">&lt;-</span> <span class="fu">renderPlot</span>({</span>
<span id="cb1-32"><a href="#cb1-32" tabindex="-1"></a>      <span class="cf">if</span> (input<span class="sc">$</span>plotType <span class="sc">==</span> <span class="st">"scatter"</span>) {</span>
<span id="cb1-33"><a href="#cb1-33" tabindex="-1"></a>        <span class="fu">plot</span>(x, y)</span>
<span id="cb1-34"><a href="#cb1-34" tabindex="-1"></a>      } <span class="cf">else</span> {</span>
<span id="cb1-35"><a href="#cb1-35" tabindex="-1"></a>        breaks <span class="ot">&lt;-</span> input<span class="sc">$</span>breaks</span>
<span id="cb1-36"><a href="#cb1-36" tabindex="-1"></a>        <span class="cf">if</span> (breaks <span class="sc">==</span> <span class="st">"custom"</span>) {</span>
<span id="cb1-37"><a href="#cb1-37" tabindex="-1"></a>          breaks <span class="ot">&lt;-</span> input<span class="sc">$</span>breakCount</span>
<span id="cb1-38"><a href="#cb1-38" tabindex="-1"></a>        }</span>
<span id="cb1-39"><a href="#cb1-39" tabindex="-1"></a></span>
<span id="cb1-40"><a href="#cb1-40" tabindex="-1"></a>        <span class="fu">hist</span>(x, <span class="at">breaks =</span> breaks)</span>
<span id="cb1-41"><a href="#cb1-41" tabindex="-1"></a>      }</span>
<span id="cb1-42"><a href="#cb1-42" tabindex="-1"></a>    })</span>
<span id="cb1-43"><a href="#cb1-43" tabindex="-1"></a>  }</span>
<span id="cb1-44"><a href="#cb1-44" tabindex="-1"></a></span>
<span id="cb1-45"><a href="#cb1-45" tabindex="-1"></a>  <span class="fu">shinyApp</span>(ui, server)</span>
<span id="cb1-46"><a href="#cb1-46" tabindex="-1"></a>}</span></code></pre></div>
  </div>
</div>
```
