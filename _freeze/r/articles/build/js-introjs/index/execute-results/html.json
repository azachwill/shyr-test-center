{
  "hash": "11b3f4c05f046006993f1e4851d3d771",
  "result": {
    "markdown": "---\ntitle: How to develop an interactive, dynamic help system for your app with introJS\ndate: 2017-07-12\ndescription: >\n  In this article, we will show you how to use the same functions to create a\n  dynamic interactive help system for Shiny apps, based on the JavaScript\n  library introJS.\nauthor:\n  - Hermann Sontrop\n  - Erwin Schuijtvlot\nresources:\n  - \"*.png\"\nexecute:\n  freeze: true\n---\n\n\n## Introduction\n\nIn the previous tutorials, we focused on using JavaScript to create htmlwidgets based on [C3](http://c3js.org/). To do this, we used three pivotal functions:\n\n1. the R function `sendCustomMessage`, which you can call via the session object, i.e `session$sendCustomMessage`\n2. the JavaScript function `Shiny.onInputChange`\n3. the JavaScript function `Shiny.addCustomMessageHandler`.\n\n\nIn this tutorial, we will show you how to use the same functions to create a dynamic interactive help system for Shiny apps, based on the JavaScript library [introJS](http://introjs.com/).\n\n\n## Intro.js basics and jsFiddle\n\nIntroJS lets you create a step-by-step guide for a website. It will draw a nice box around elements of your choice, combined with an annotation layer and a navigation system.\n\n\nUsing introJS in a piece of HTML code is very simple. Let's first set up a jsFiddle example that uses a [bootstrap](http://getbootstrap.com/) grid of 3 rows, with 3 columns each. In addition, let's add a button that you can click to activate introJS. Click the green start button in the example below to see introJS in action.\n\n\n<iframe width='100%' height='500px' src='https://jsfiddle.net/ok1vzopq/6/embedded/result,html,js,css' allowfullscreen='allowfullscreen' frameborder='0'></iframe>\n<div style = \"text-align:center\">press the green start button to activate introJS</div>\n\n<br><br>\nWe can add introJS to the app in three steps, described in detail [here](https://github.com/usablica/intro.js/):\n\n  1) Include [introjs.css](https://raw.githubusercontent.com/usablica/intro.js/master/introjs.css) and [intro.js](https://raw.githubusercontent.com/usablica/intro.js/master/intro.js) with your page.\n\n\n  2) For each element in the tour, add a `data-intro`, a `data-position`, and an optional `data-step` attribute.\n  <br><br>\n  These respectively specify the display text, the position of the box displayed by introJS, and the step number of\n  the tour.\n\n  3) In order to start the tour, in JavaScript, call `introJs().start();`.\n\n\nIn the HTML tab of our fiddle, we see that the first row is created via:\n\n```html\n<div class=\"row\">\n  <div class=\"col-sm-4 well\" data-step=\"1\" data-intro=\"text step 1\" data-position='bottom'>element 1</div>\n  <div class=\"col-sm-4 well\" data-step=\"2\" data-intro=\"text step 2\" data-position='bottom'>element 2</div>\n  <div class=\"col-sm-4 well\" data-step=\"3\" data-intro=\"text step 3\" data-position='bottom'>element 3</div>\n</div>\n\n```\n\nThe classes `row`, `col-sm-4`, and `well` are all bootstrap classes, which define the grid layout. [Bootstrap](http://getbootstrap.com/) is the most popular HTML, CSS, and JavaScript framework for developing responsive, mobile first projects on the web. For some inspiration, see [these](http://www.w3schools.com/bootstrap/bootstrap_grid_examples.asp) examples. For more complete use cases, see [these](http://getbootstrap.com/getting-started/#examples) templates.\n\nOf note, many layout functions in Shiny are directly based on bootstrap. For instance, in a Shiny context the R code snippet:\n\n```\nfluidRow(\n  column(4,\"element 1\")\n)\n```\n\nproduces an output that resembles row 1 in our example (but without the introJS attributes and well classes).\n\nComing back to introJS, from the HTML code in the example above we see that it is quite easy to add the `data-step`, `data-intro` and `data-position` attributes.\n\nNext, in the JavaScript tab of our fiddle, we've attached an event handler to our button using [jQuery](https://jquery.com/) (see also [tutorial 3](http://shiny.rstudio.com/tutorial/js-lesson3/)). Here we use the event handler to start introJS on a button click, i.e. via the JavaScript code:\n\n```javascript\n$(\"button\").on(\"click\", function(){\n\tintroJs().start();\n})\n```\n\nIn the CSS tab of our jsFiddle, we've set some styling options to center the button and the text in the example. In the CSS definitions we use [flexbox](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout/Using_CSS_flexible_boxes) to center the button. Even though flexbox is by no means a focus point of this tutorial and is\n a relative new addition to the CSS language, it greatly enhances your abilities to create page layouts via CSS. For a complete guide to flexbox, see [this](https://css-tricks.com/snippets/css/a-guide-to-flexbox/) article by CSS-tricks!\n\nFinally, you may wonder, where did we included the JavaScript and CSS file from step 1? You can find the links when pressing the <img src = \"fiddleButton.png\" style = \"display: inline; height: 20px\"> button, located at the top right in our example fiddle. This opens up a new display with a panel on the left hand side that contains an External Resources tab, which includes all the external dependencies for our jsFiddle, i.e. the introjs CSS and JavaScript files, Bootstrap and jQuery.\n\nOf note, in a standard Shiny app you don't need to explicitly load either Bootstrap or jQuery as they are included automatically by Shiny. However, if you base your app on [HTML Templates](http://shiny.rstudio.com/articles/templates.html), then be careful you don't mistakenly include multiple jQuery or Bootstrap instances. In case you need to, you can also suppress specific web dependencies via [suppressDependencies](http://shiny.rstudio.com/reference/shiny/latest/suppressDependencies.html). This function can be helpful if distinct widgets include different versions of the same library e.g. different versions of d3.js.\n\n\n\n### Using JSON to setup introJS\n\nEven though the previous example creates a tour, it's not very convenient to manually set all the attributes for each element. Luckily, introJS allows you to use a [JSON array](http://www.w3schools.com/json/json_syntax.asp) to specify all relevant options, in which each step can use a CSS selector to indicate where we want to draw a box, what should be in it and where the box should be displayed relative to the selected element, among other things. The fiddle below shows an implementation using this concept.\n\n\n<iframe width='100%' height='500px' src='https://jsfiddle.net/czumyL8j/2/embedded/result,html,js,css' allowfullscreen='allowfullscreen' frameborder='0'></iframe>\n<div style = \"text-align:center\">press the green start button to activate introJS</div>\n\n<br><br>\n\nThe output is identical to the fiddle in the previous section. However, you can see in the HTML tab that we greatly simplified the HTML markup and now only need an id field. Furthermore, in the JavaScript tab you can see that we specified an array that contains objects that describe the individual steps in the tour. The array for the first two steps looks like this:\n\n``` javascript\nvar Steps = [\n    {\n      element: '#step1',\n      intro: \"text step 1\",\n      position: 'bottom'\n    },\n    {\n      element: '#step2',\n      intro: \"text step 2\",\n      position: 'bottom'\n    }\n];\n```\n\nFinally, we created an instance of introJS, loaded the data via the `setOptions` method and subsequently started the tour. The relevant code looks like this:\n\n``` javascript\n// initialize an introjs instance\nvar intro = introJs();\n\n// pass in the Steps array created earlier\nintro.setOptions({steps: Steps });\n\n// start intro.js\nintro.start();\n```\n\n\nNote that all of this code is located inside the callback function for our button click event handler. Hence, this code will only fire after we press the button!\n\n### Customization and additional methods\n\nIntroJS is a versatile library, which offers many additional functions and options next to those discussed here. For a more comprehensive overview of additional attributes that allow customization, see [here](https://github.com/usablica/intro.js/wiki/Documentation#attributes).\n\n\nIn addition, introJS offers a rich set of methods such as: `introJs.nextStep()`, `introJs.previousStep()` and `introJs.exit()`.\n\nThese methods allow you to control the direction of the guided tour. For many of these methods, introJS let's you call a JavaScript function, before, during or after completion, e.g. via: `introJs.onchange`, `introJs.oncomplete`  and `introJs.onexit`.\n\n\nA complete list of methods is provided [here](https://github.com/usablica/intro.js/wiki/Documentation).\n\n\nCaveat: for some functionality in more recent versions of introJS ($\\geq$ 2), an inexpensive licence is required for commercial applications. All functionality in this tutorial work with earlier versions though.\n\n\n## Using introJS in a Shiny app\n\nNow that we have a better grasp on what introJS offers, let's see how we can use introJS in a Shiny context. The idea is quite simple.\n\n\nFrom the previous tutorial, we know that we can call any JavaScript function from R by using `session$sendCustomMessage`, which sends a message to an event handler, which we can create via `Shiny.addCustomMessageHandler`. Furthermore, we can use `Shiny.onInputChange` inside a JavaScript function to send a message back to the Shiny `input` object, e.g. when we click on a box.\n\n\nNow that we know which JavaScript functions to call and what our data should look like, we can setup Shiny to make these calls.\n\n\nFor our first Shiny based introJS app, we are not going to put the code in an R package. This makes the steps easier to follow. It also makes it easier for you to experiment with the code. For readers who just want to use introJS in a Shiny app, without knowing all the details, we made an R package that you can download and use. We explain how to use this package in the next section.\n\nA live version of the end result of a first basic Shiny implementation can be found [here](https://js-tutorial.shinyapps.io/BasicDemoIntroJS/) and the source code can be found [here](https://github.com/FrissAnalytics/shinyJsTutorials/tree/master/tutorials/materials4/BasicDemoIntroJS).\n\n\n<a href = \"https://js-tutorial.shinyapps.io/BasicDemoIntroJS/\" target=\"_blank\" >\n  <img src = \"BasicIntroJSDemoApp.png\" style=\"max-width: 100%;\">\n</a>\n<div style = \"text-align: center; margin-bottom: 25px\">Click the image to see a live shiny app!</div>\n\n\nWe proceed by discussing the various steps needed to make the above demo app work and how you can start making your own JavaScript powered apps.\n\n### Create small toy examples first\n\nWhen you're building new Shiny functionality, it is often useful to first build a small prototype in HTML and JavaScript (without Shiny). This let's you focus on:\n\n* which CSS and JavaScript files to include\n* how to structure your data\n* how to call specific library functions\n\nEssentially, this is the role that our jsFiddle examples fill in our tutorials. After you're comfortable that your mini application works the way you want, the sole trick is to let Shiny include the files you need, and to use Shiny to build the HTML elements you need. After that, just let Shiny call whatever JavaScript function(s) you need to call and pass any data via jsonlite (Shiny will implicitly do this for you, see [here](http://shiny.rstudio.com/tutorial/js-lesson3/#data-transformation-from-r-to-javascript-and-back)).\n\n\nIn the case at hand, to go from the fiddle shown above, to a Shiny app, we have to implement the following steps:\n\n  1) Make Shiny include the correct CSS and JavaScript files\n  2) Let Shiny spit out the HTML you need\n  3) In R, send a custom message to the client i.e. JavaScript, with the data we need introJS to have\n  4) In JavaScript, setup a custom message handler that can call introJS and pass it the data it needs\n\n### Creating the UI code\n\nComing back to our jsFiddle, note that many layout functions rely on bootstrap classes. In fact, in Shiny, the `fluidRow` and `column` functions create divs with a `row` and `col-sm-x` class, respectively. Hence, these functions almost provide the HTML output of our first introJS fiddle example. We only need to add an extra div to each column to make it right.\n\nFirst, we start by copying the CSS we defined in the fiddle into a separate file, i.e. `app.css`, such that we can use the custom `well` and `flexcontainer` classes.\n\nThe ui.R code snippet below shows how to get the first row of elements, including the start button, as well as how to load all of the dependencies that we need. We also include a file called `app.js`, which contains all of the client side code that we need to update the help contents and start the help (see below).\n\n```R\n# Include IntroJS styling\nincludeCSS(\"introjs.min.css\"),\n\n# Include styling for the app\nincludeCSS(\"app.css\"),\n\n# Include IntroJS library\nincludeScript(\"intro.min.js\"),\n\n# Include JavaScript code to make shiny communicate with introJS\nincludeScript(\"app.js\")\n\n# setup grid\n# row 1\nfluidRow(\n  column(4, div(id=\"step1\", class=\"well\", \"element1\")),\n  column(4, div(id=\"step2\", class=\"well\", \"element2\")),\n  column(4, div(id=\"step3\", class=\"well\", \"element3\"))\n),\n...\n\n# centered button\ndiv(class=\"flexcontainer\",\n\n    # action button\n    actionButton(inputId=\"startHelp\", label=\"start\", class=\"btn-success\")\n)\n```\n\n### Send help contents from the server to the client\n\nNext, let's see what we should put in `app.js`.\n\n\nThe first thing we need to do is to initiate introJS. We can do this exactly like in our fiddle i.e. via `var intro = introJs();`. Next, instead of setting the help contents in JavaScript, we want to be able to set the help contents dynamically from Shiny.\n\n\nAs mentioned above, we can use the JavaScript method `Shiny.addCustomMessageHandler` to create a custom message handler that we can invoke from R. In our case, the handler must be able to receive tour data in the same format as described in the fiddle above and to pass this data to the introJS object `intro`.\n\nPutting these steps together results in the following JavaScript code:\n```javascript\n// initialize an introjs instance\nvar intro = introJs();\n\n// handler 1\nShiny.addCustomMessageHandler(\"setHelpContent\",\n\n  // callback function.\n  // note: data is passed by shiny and contains the tour data\n  function(data){\n\n    // load data\n    intro.setOptions({steps: data});\n  }\n);\n```\n\nOur handler is called `setHelpContent`, which is the name we'll use when sending information from R via `session$sendCustomMessage` (see below).\n\nTo conveniently configure our help system, we can put the help contents into a comma separated configuration file, e.g.`help.csv`.\n\n\nIn our case, `help.csv` looks like this:\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-76b3fa11019b7b306e9c\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-76b3fa11019b7b306e9c\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[1,2,3,4],[\"This is a generic welcome message, press the buttons below the navigate trough the elements of this page\",\"This help page shows content for a specific element. Specific elements are targeted in the help.csv file by using a css selector in the third column.\",\"Using the selector and step columns in the help.csv file we can create a tour over all elements of the page\",\"You can also use html to &lt;b&gt;mark up&lt;/b&gt; the &lt;i&gt;text&lt;/i&gt; thats displayed in the help.\"],[null,\"#Gauge1\",\"#PieLabel\",\"#lineBarChart\"],[\"auto\",\"auto\",\"auto\",\"auto\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>step<\\/th>\\n      <th>intro<\\/th>\\n      <th>element<\\/th>\\n      <th>position<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n<br><br>\nFrom left to right, the columns respectively indicate: the step number, the display text for that step, the CSS selector and the position in which we want the text box to appear. The value for the latter option can be either `top`, `left`, `right`, `bottom`, `bottom-left-aligned`, `bottom-middle-aligned`, `bottom-right-aligned` or `auto`. If left empty, the default option equals `bottom`.\n\nOnce we have our dataframe ready to go (here called `steps`), we can send it to introJS via:\n\n```R\n# set help content\nsession$sendCustomMessage(type = 'setHelpContent', message = list(steps = toJSON(steps) ))\n```\n\nEssentially, you can use one of three basic strategies to send information that introJS needs from R to JavaScript:\n\n1. Send the information from R in a convenient R structure. Then further modify the object in JavaScript to create the object JavaScript needs.\n2. Reshape the information in R so that when Shiny passes it as jsonlite (see tutorial 2 & 3), it ends up as the precise object that JavaScript needs.\n3. A combination of strategies 2 and 3.\n\n\nNote that we didn't send `steps` from R directly. Instead, we sent `toJSON(steps)`, which means we went with strategy 2. This is only to ensure that JavaScript gets the object it needs. In practice, this step often needs some experimentation to see how you can best send an object from R to JavaScript. Similar logic holds for sending objects from JavaScript to R.\n\n\n### Start the help from the server\n\nAll that remains is to create a mechanism to start the help from the server. As you might have guessed, this mechanism is again constructed via a custom message handler, in which we invoke `introJS.start()`:\n\n``` javascript\n// handler 2\nShiny.addCustomMessageHandler(\"startHelp\", function(message) {\n\n    // start intro.js\n    // note: we don't need information from shiny, just start introJS\n    intro.start();\n  }\n);\n```\n\nNote that we could also directly add an [onClick](http://www.w3schools.com/jsref/event_onclick.asp) attribute to our button like we did in the examples above. An advantage of the approach taken here is that we have more control over our help because we can now invoke it from the server i.e. Shiny.\n\nTo invoke the help from the server, we add an `observeEvent` block in R. This block listens to our button and calls `sendCustomMessage` to invoke our `startHelp` handler as defined above:\n\n```R\n# listen to the action button\nobserveEvent(input$startHelp,{\n\n  # on click, send custom message to start help\n  session$sendCustomMessage(type = 'startHelp', message = list(\"\"))\n})\n```\n\n### introJS demo package\n\nBelow we present a Shiny demo app that contains a compete implementation of the various aspects discussed above. For convenience, we made the code available as an R package.\n\n\nWe won't cover the complete code base in detail as this involves various aspects related to package building e.g. using [addResourcePath](http://shiny.rstudio.com/reference/shiny/latest/addResourcePath.html) to include dependencies, which is outside the scope of this tutorial. The complete code for this example app can be downloaded [here](https://github.com/FrissAnalytics/shinyJsTutorials/tree/master/tutorials/materials4/C3_demo_IntroJS), while the accompanying R package can be downloaded [here](https://github.com/FrissAnalytics/shinyJsTutorials/tree/master/tutorials/materials4/FrissIntroJSBasic).\n\nIn short, the R library lets you:\n\n  1) Load a definition of the help content via a dataframe, which is subsequently transformed into a JSON array (like in the jsFiddle above)\n  2) Automatically add a help button to the page to activate introJS\n  3) Automatically add all introJS related JavaScript and CSS dependencies to the app\n  4) Automatically create an introJS instance\n  5) Automatically pass the help settings from step 1 to the introJS instance\n\nTo see the package in action, press the screenshot below!\n\n<p style = \"margin:25px\">\n  <a href = \"https://js-tutorial.shinyapps.io/C3_demo_IntroJSBasic/\" target = \"_blank\"><img src = \"C3IntroJSdemoApp.png\" width=\"100%\"></img></a>\n  <div style = \"text-align:center\">Shiny C3 dashboard app with basic help system using the R introJS package</div>\n</p>\n\n\nIn the remainder of this tutorial, we describe how you can use our introJS R package in a real Shiny app. This is illustrated in an extended version of the dashboard app that we showed in the previous tutorials.\n\n### Using the introJS package in a Shiny app\n\n\nWith the help of our [introJS package](https://github.com/FrissAnalytics/shinyJsTutorials/tree/master/tutorials/materials4/FrissIntroJSBasic), using introJS in a Shiny application is a breeze! Only the following 3 simple steps are needed:\n\n  1) in global.R, create a dataframe, e.g. called `helpData`, in which each row specifies:\n    <br><br>\n    i) the step number,\n    ii) the display text for that step\n    iii) the [CSS selector](http://www.w3schools.com/cssref/css_selectors.asp) to select the correct element\n    iv) the position we want the text box to appear in\n    <br><br>\n\n  2) in ui.R, call `addIntroJS()`\n\n  3) in server.R, call `initIntroJS` and pass in `session` and `helpData`\n\nThat's it! The package will handle:\n\n* creating of the JSON object\n* setting up the message handlers\n* inserting the associate introJS, CSS, and JavaScript files\n* creating of the button\n* setting up the click handler\n* passing the data to introJS, and\n* activating introJS.\n\nIn the example app, we created a dataframe similar to the one discussed above by reading in a predefined CVS file whose contents look like this:\n\n\n::: {.cell}\n::: {.cell-output-display}\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-b31991a15a890f649d3a\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b31991a15a890f649d3a\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[1,2,3,4],[\"This is a generic welcome message, press the buttons below the navigate trough the elements of this page\",\"This help page shows content for a specific element. Specific elements are targeted in the help.csv file by using a css selector in the third column.\",\"Using the selector and step columns in the help.csv file we can create a tour over all elements of the page\",\"You can also use html to &lt;b&gt;mark up&lt;/b&gt; the &lt;i&gt;text&lt;/i&gt; thats displayed in the help.\"],[null,\"#Gauge1\",\"#PieLabel\",\"#lineBarChart\"],[\"auto\",\"auto\",\"auto\",\"auto\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th>step<\\/th>\\n      <th>intro<\\/th>\\n      <th>element<\\/th>\\n      <th>position<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"dom\":\"t\",\"columnDefs\":[{\"className\":\"dt-right\",\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n\n#### Implemenation details\n\nBriefly, the package implementation contains an R file, called `FRISSIntroJS.R`, which contains the `addIntroJS` and `initIntroJS` functions, as well as a JavaScript file, called `IntroJSBinding.js`, which is located in the package `www` folder. The latter file contains the JavaScript logic for the introJS component. Please feel free to inspect the annotated source code to familiarize yourself with the various aspects of package building.\n\nObviously, many different implementations of introJS are possible, so don't be too worried if you don't understand all of the aspects of this code base or feel another way of implementing some features is more appropriate. Furthermore, our package is by no means a full fledged implementation and only serves to illustrate alternative uses of the key JavaScript functions discussed above.\n\n\n## Advanced example\n\nAs a bonus, we present a completely tricked out toy example app, that allows you to use introJS, switch tab panels in a Shiny app via introJS, use voice recognition to activate introJS, and dynamically update the content inside an introJS message box. The app even uses voice synthesis to speak out the text inside each box! A full discussion of this code base is well beyond the scope of this tutorial. However, it serves as a nice illustration to see what's possible when combining JavaScript with Shiny code! Here speech recognition is based on [annyang](https://www.talater.com/annyang/).\n\n\nCaveat 1: most parts of this code only work in recent versions of the [Chrome](https://www.google.com/chrome/browser/desktop/) browser.\n\n\nCaveat 2: the current voice recognition capabilities of Chrome are rather limited and often buggy, which likely leave production applications out of scope based on our approach.\n\n\nTo see this demo in action, navigate a recent version of the Chrome browser to [this](https://js-tutorial.shinyapps.io/C3_demo_IntroJSAdvanced/) link. You can download the complete code base [here](https://github.com/FrissAnalytics/shinyJsTutorials/tree/master/tutorials/materials4/C3_demo_IntroJSAdvanced).\n\n\n<p style = \"margin:25px\">\n  <a href = \"https://js-tutorial.shinyapps.io/C3_demo_IntroJSBasic/\" target = \"_blank\"><img src = \"C3IntroJSAdvancedDemoApp.png\" width=\"100%\"></img></a>\n  <div style = \"text-align:center\">Shiny C3 dashboard app advanced example, with tab switching via introJS, using voice recognition and voice synthesis.</div>\n</p>\n\n<br>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../../../site_libs/htmlwidgets-1.6.2.9000/htmlwidgets.js\"></script>\n<link href=\"../../../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../../../site_libs/datatables-binding-0.28.1/datatables.js\"></script>\n<script src=\"../../../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../../../site_libs/dt-core-1.13.4/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../../../site_libs/dt-core-1.13.4/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../../../site_libs/dt-core-1.13.4/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../../../site_libs/crosstalk-1.2.0.9000/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../../../site_libs/crosstalk-1.2.0.9000/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}